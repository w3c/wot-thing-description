@prefix : <http://www.w3.org/ns/td-validation#> .
@prefix td: <https://www.w3.org/2019/wot/td#> .
@prefix jsonschema: <https://www.w3.org/2019/wot/json-schema#> .
@prefix wotsec: <https://www.w3.org/2019/wot/security#> .
@prefix hctl: <https://www.w3.org/2019/wot/hypermedia#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix schema: <http://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

:ThingShape a sh:NodeShape ;
    sh:targetClass td:Thing ;
    skos:definition """An abstraction of a physical or a virtual entity whose
          metadata and interfaces are described by a WoT Thing
          Description, whereas a virtual entity is the composition
          of one or more Things."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 1 ;
    sh:property [
        sh:path td:title ;
        skos:definition """Provides a human-readable title (e.g., display
                a text for UI representation) based on a default
                language."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property _:titles ;
    sh:property _:description ;
    sh:property _:descriptions ;
    sh:property [
        sh:path td:versionInfo ;
        skos:definition """Provides version information."""^^rdf:HTML ;
        sh:node :VersionInfoShape ;
        sh:maxCount 1 ;
        sh:order 5 ;
    ] ;
    sh:property [
        sh:path dcterms:created ;
        skos:definition """Provides information when the TD instance was
                created."""^^rdf:HTML ;
        sh:datatype xsd:dateTime ;
        sh:maxCount 1 ;
        sh:order 6 ;
    ] ;
    sh:property [
        sh:path dcterms:modified ;
        skos:definition """Provides information when the TD instance was
                last modified."""^^rdf:HTML ;
        sh:datatype xsd:dateTime ;
        sh:maxCount 1 ;
        sh:order 7 ;
    ] ;
    sh:property [
        sh:path td:supportContact ;
        skos:definition """Provides information about the TD maintainer as
                URI scheme (e.g., <code>mailto</code> [[RFC6068]],
                <code>tel</code> [[RFC3966]],
                <code>https</code> [[RFC9112]])."""^^rdf:HTML ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 8 ;
    ] ;
    sh:property [
        sh:path td:baseURI ;
        skos:definition """Define the base URI that is used for all
                relative URI references throughout a TD document.
                In TD instances, all relative URIs are resolved
                relative to the base URI using the algorithm
                defined in [<cite><a class="bibref" data-link-type=
                "biblio" href='#bib-rfc3986' title=
                "Uniform Resource Identifier (URI): Generic Syntax">RFC3986</a></cite>].<br>
                <br>
                <code>base</code> does not affect the URIs used in
                <code>@context</code> and the IRIs used within
                Linked Data [<cite><a class="bibref"
                data-link-type="biblio" href='#bib-linked-data'
                title=
                "Linked Data Design Issues">LINKED-DATA</a></cite>]
                graphs that are relevant when semantic processing
                is applied to TD instances."""^^rdf:HTML ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 9 ;
    ] ;
    sh:property [
        sh:path [
            sh:alternativePath (
                td:hasPropertyAffordance
                td:hasActionAffordance
                td:hasEventAffordance
            )
        ] ;
        sh:node :InteractionAffordanceShape ;
        sh:minCount 1
    ] ;
    sh:property [
        sh:path td:hasPropertyAffordance ;
        skos:definition """All Property-based <a href='#dfn-interaction-affordance' class="internalDFN" data-link-type="dfn">Interaction Affordances</a>
                  of the Thing."""^^rdf:HTML ;
        sh:node :PropertyAffordanceShape ;
        sh:order 10 ;
    ] ;
    sh:property [
        sh:path td:hasActionAffordance ;
        skos:definition """All Action-based <a href='#dfn-interaction-affordance' class="internalDFN" data-link-type="dfn">Interaction Affordances</a>
                  of the Thing."""^^rdf:HTML ;
        sh:node :ActionAffordanceShape ;
        sh:order 11 ;
    ] ;
    sh:property [
        sh:path td:hasEventAffordance ;
        skos:definition """All Event-based <a href='#dfn-interaction-affordance' class="internalDFN" data-link-type="dfn">Interaction Affordances</a>
                  of the Thing."""^^rdf:HTML ;
        sh:node :EventAffordanceShape ;
        sh:order 12 ;
    ] ;
    sh:property [
        sh:path td:hasLink ;
        skos:definition """Provides Web links to arbitrary resources that
                relate to the specified Thing Description."""^^rdf:HTML ;
        sh:node :LinkShape ;
        sh:order 13 ;
    ] ;
    sh:property [
        sh:path td:hasForm ;
        skos:definition """Set of form hypermedia controls that describe how 
                  an operation can be performed. Forms are
                  serializations of Protocol Bindings. Thing-level forms are used to describe endpoints for a group of interaction affordances."""^^rdf:HTML ;
        sh:node :FormShape ;
        sh:order 14 ;
    ] ;
    sh:property [
        sh:path td:hasSecurityConfiguration ;
        skos:definition """Set of security definition names, chosen from
                those defined in <code>securityDefinitions</code>.
                These must all be satisfied for access to resources."""^^rdf:HTML ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:order 15 ;
    ] ;
    sh:property [
        sh:path td:definesSecurityScheme ;
        skos:definition """Set of named security configurations
                (definitions only). Not actually applied unless
                names are used in a <code>security</code>
                name-value pair."""^^rdf:HTML ;
        sh:minCount 1 ;
        sh:node :SecuritySchemeShape ;
        sh:order 16 ;
    ] ;
    sh:property [
        sh:path td:followsProfile ;
        skos:definition """Indicates the WoT Profile mechanisms followed by this Thing Description and the corresponding Thing implementation."""^^rdf:HTML ;
        sh:datatype xsd:anyURI ;
        sh:order 17 ;
    ] ;
    sh:property [
        sh:path td:schemaDefinitions ;
        skos:definition """Set of named data schemas.
                To be used in a <code>schema</code>
                name-value pair inside an 
                <code>AdditionalExpectedResponse</code> object."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:order 18 ;
    ] ;
    sh:property [
        sh:path td:hasUriTemplateSchema ;
        skos:definition """Define URI template variables according to [[RFC6570]]  as collection
                based on DataSchema declarations. The Thing level <code>uriVariables</code> can be used in Thing-level 
                <code>forms</code> or in Interaction Affordances.
                The individual variables DataSchema cannot be an ObjectSchema or an ArraySchema since each variable needs
                to be serialized to a string inside the <code>href</code> upon the execution of the operation.
                If the same variable is both declared in Thing-level <code>uriVariables</code> and in Interaction Affordance level,
                 the Interaction Affordance level variable takes precedence."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:order 18 ;
    ] ;
    skos:scopeNote """<p>
              For <code>@context</code> the following rules are defined for <a>Thing Description</a> instances:
        <ul>
            <li>
    <span class="rfc2119-assertion" id=
          "td-context-ns-thing-mandatory">

          The <code>@context</code>
          name-value pair <em class="rfc2119" title=
          "MUST">MUST</em> contain the anyURI
          <code>https://www.w3.org/2022/wot/td/v1.1</code>
          in order to identify the document as a TD 1.1 which would allow <a>Consumers</a> to use the newly introduced terms.
          </span>
          </li>
          <li>
          <span class="rfc2119-assertion" id=
          "td-context-ns-td10-namespace"> 
          When there are possibly TD 1.0 consumers the anyURI
          <code>https://www.w3.org/2019/wot/td/v1</code>
          <em class="rfc2119" title=
          "MUST">MUST</em> be the first entry and the <code>https://www.w3.org/2022/wot/td/v1.1</code> <em class="rfc2119" title=
          "MUST">MUST</em> be the second entry.</span>
          </li>
          <li>
          <span class="rfc2119-assertion" id=
          "td-context-ns-td10-namespacev10"> 
            TD 1.1 consumers MUST accept TDs satisfying the W3C WoT Thing Description 1.0 [[wot-thing-description]] specification. 
            </span>
          </li>
          <li>
          <span class="rfc2119-assertion" id=
          "td-context-ns-thing-optional">When <code>@context</code>
          is an <a href="#dfn-array" class="internalDFN"
          data-link-type="dfn">Array</a>, the anyURI
          <code>https://www.w3.org/2022/wot/td/v1.1</code> <em class=
          "rfc2119" title="MAY">MAY</em> be followed by elements of
          type <code>anyURI</code> or type <a href="#dfn-map"
          class="internalDFN" data-link-type="dfn">Map</a> in any
          order, while it is <em class="rfc2119" title=
          "RECOMMENDED">RECOMMENDED</em> to include only one
          <a href="#dfn-map" class="internalDFN" data-link-type=
          "dfn">Map</a> with all the name-value pairs in the
          <code>@context</code> <a href="#dfn-array" class=
          "internalDFN" data-link-type="dfn">Array</a>.</span>
          </li>
        <li>
          <span class="rfc2119-assertion" id=
          "td-context-ns-thing-map-of-namespaces"><a href=
          "#dfn-map" class="internalDFN" data-link-type=
          "dfn">Maps</a> contained in an <code>@context</code>
          <a href="#dfn-array" class="internalDFN" data-link-type=
          "dfn">Array</a> <em class="rfc2119" title="MAY">MAY</em>
          contain name-value pairs, where the value is a namespace
          identifier of type <code>anyURI</code> and the name a
          <a href="#dfn-term" class="internalDFN" data-link-type=
          "dfn">Term</a> or prefix denoting that namespace.</span>
          </li>
          <li>
          <span class="rfc2119-assertion" id=
          "td-context-default-language">One <a href="#dfn-map"
          class="internalDFN" data-link-type="dfn">Map</a>
          contained in an <code>@context</code> <a href=
          "#dfn-array" class="internalDFN" data-link-type=
          "dfn">Array</a> <em class="rfc2119" title=
          "SHOULD">SHOULD</em> contain a name-value pair that
          defines the default language for the Thing Description,
          where the name is the <a href="#dfn-term" class=
          "internalDFN" data-link-type="dfn">Term</a>
          <code>@language</code> and the value is a well-formed
          language tag as defined by [<cite><a class="bibref"
          data-link-type="biblio" href="#bib-bcp47" title=
          "Tags for Identifying Languages">BCP47</a></cite>] (e.g.,
          <code>en</code>, <code>de-AT</code>, <code>gsw-CH</code>,
          <code>zh-Hans</code>, <code>zh-Hant-HK</code>,
          <code>sl-nedis</code>).</span>
          </li>
          </ul>

          </p>
          <p>To determine the base direction of all
          human-readable text in <a>Thing Description</a> 
          and <a>Thing Model</a> instances this specification 
           recommends to follow the [[STRING-META]] guideline about 
           <a href="https://www.w3.org/TR/string-meta/#string_specific_direction">string-specific directional information</a>
           when no built-in mechanism for associating base direction metadata
           is available.
           </p>

          <p><a href="#dfn-td-processor" class="internalDFN"
          data-link-type="dfn">TD Processors</a> should be aware of
          certain special cases when processing bidirectional text.
          <span class="rfc2119-assertion" id="td-processor-bidi-isolation">
          <a href="#dfn-td-processor" class="internalDFN"
          data-link-type="dfn">TD Processors</a> SHOULD take care to use bidi isolation when
          presenting strings to users, particularly when embedding
          in surrounding text (e.g., for Web user interface)</span>. 
          Mixed direction text can occur in any language, even when the
          language is properly identified.</p>
          <p><span class="rfc2119-assertion" id="td-producer-mixed-direction">
          TD producers SHOULD attempt to provide mixed direction
          strings in a way that can be displayed successfully by a
          naive user agent. </span>
          For example, if an RTL string begins
          with an LTR run (such as a number or a brand or trade
          name in Latin script), including an RLM character at the
          start of the string or wrapping opposite direction runs
          in bidi controls can assist in proper display.</p>
          <p><em>Strings on the Web: Language and Direction
          Metadata</em> [<cite><a class="bibref" data-link-type=
          "biblio" href="#bib-string-meta" title=
          "Strings on the Web: Language and Direction Metadata">string-meta</a></cite>]
          provides some guidance and illustrates a number of
          pitfalls when using bidirectional text.</p>
          <p id="meta-interactions-of-thing">In addition to the
          explicitly provided <a href="#dfn-interaction-affordance"
          class="internalDFN" data-link-type="dfn">Interaction
          Affordances</a> in the <code>properties</code>,
          <code>actions</code>, and <code>events</code> <a href=
          "#dfn-map" class="internalDFN" data-link-type=
          "dfn">Maps</a>, a <a href="#dfn-thing" class=
          "internalDFN" data-link-type="dfn">Thing</a> can also
          provide meta-interactions, which are indicated by
          <code>Form</code> instances in its optional
          <code>forms</code> <a href="#dfn-array" class=
          "internalDFN" data-link-type="dfn">Array</a>.
          <span class="rfc2119-assertion" id="td-op-for-thing">When
          the <code>forms</code> <a href="#dfn-array" class=
          "internalDFN" data-link-type="dfn">Array</a> of a
          <a href="#dfn-thing" class="internalDFN" data-link-type=
          "dfn">Thing</a> instance contains <code>Form</code>
          instances, it MUST contain <code>op</code> member with the string values assigned 
          to the name <code>op</code>, either directly or within an <a href=
          "#dfn-array" class="internalDFN" data-link-type=
          "dfn">Array</a>, <em class="rfc2119" title=
          "MUST">MUST</em> be one of the following <em>operation
          types</em>: <code>readallproperties</code>,
          <code>writeallproperties</code>,
          <code>readmultipleproperties</code>,
          <code>writemultipleproperties</code>, <code>observeallproperties</code>,
          <code>unobserveallproperties</code>, <code>queryallactions</code>, 
          <code>subscribeallevents</code>, or
          <code>unsubscribeallevents</code>.</span> (See
          <a href="#td-forms-readall-example">an example</a> for an
          usage of <code>form</code> in a Thing instance.)</p>
          <p>The data schema for each of the property meta-interactions is
          constructed by combining the data schemas of each
          <code>PropertyAffordance</code> instance in a single
          <code>ObjectSchema</code> instance, where the
          <code>properties</code> <a href="#dfn-map" class=
          "internalDFN" data-link-type="dfn">Map</a> of the
          <code>ObjectSchema</code> instance contains each data
          schema of the <code>PropertyAffordances</code> identified
          by the name of the corresponding
          <code>PropertyAffordances</code> instance.</p>
          <p>If not specified otherwise (e.g., through a <a href=
          "#dfn-context-ext" class="internalDFN" data-link-type=
          "dfn">TD Context Extension</a>), the request data of the
          <code>readmultipleproperties</code> operation is an
          <a href="#dfn-array" class="internalDFN" data-link-type=
          "dfn">Array</a> that contains the intended
          <code>PropertyAffordances</code> instance names, which is
          serialized to the content type specified by the
          <code>Form</code> instance.</p>"""^^rdf:HTML .
    
:InteractionAffordanceShape a sh:NodeShape ;
    sh:targetClass td:InteractionAffordance ;
    skos:definition """Metadata of a Thing that shows the possible choices to
          <a href="#dfn-consumer" class="internalDFN" data-link-type="dfn">Consumers</a>, thereby suggesting
          how <a href="#dfn-consumer" class="internalDFN" data-link-type="dfn">Consumers</a> may interact with the
          Thing. There are many types of potential affordances, but
          <abbr title="World Wide Web Consortium">W3C</abbr> WoT
          defines three types of Interaction Affordances:
          Properties, Actions, and Events."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 2 ;
    sh:property _:title ;
    sh:property _:titles ;
    sh:property _:description ;
    sh:property _:descriptions ;
    sh:property [
        sh:path td:hasForm ;
        skos:definition """Set of form hypermedia controls that describe
                how an operation can be performed. Forms are
                serializations of Protocol Bindings. The array cannot be empty."""^^rdf:HTML ;
        sh:minCount 1 ;
        sh:node :FormShape ;
        sh:order 5 ;
    ] ;
    sh:property [
        sh:path td:hasUriTemplateSchema ;
        skos:definition """Define URI template variables according to [[RFC6570]]  as collection
                based on DataSchema declarations. The individual variables DataSchema cannot be an ObjectSchema or an ArraySchema since each variable needs
                to be serialized to a string inside the <code>href</code> upon the execution of the operation. 
                If the same variable is both declared in Thing-level <code>uriVariables</code>and in Interaction Affordance level, 
                the Interaction Affordance level variable takes precedence."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:order 6 ;
    ] .

:PropertyAffordanceShape a sh:NodeShape ;
    sh:targetClass td:PropertyAffordance ;
    skos:definition """An Interaction Affordance that exposes state of the
          Thing. This state can then be retrieved (read) and/or updated (write).
           Things can also choose to
          make Properties observable by pushing the new state after
          a change."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 3 ;
    sh:property [
        sh:path td:isObservable ;
        skos:definition """A hint that indicates whether Servients hosting
                the Thing and Intermediaries should provide a
                Protocol Binding that supports the <code>observeproperty</code> and <code>unobserveproperty</code> operations 
                for this Property."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
    ] ;
    skos:scopeNote """<p class="note">Property instances are also instances of
            the class <a href="#dataschema" class="sec-ref">DataSchema</a>. Therefore, it can contain the
            <code>type</code>, <code>unit</code>,
            <code>readOnly</code> and <code>writeOnly</code>
            members, among others.</p>"""^^rdf:HTML,
                   """<p><code>PropertyAffordance</code> is a <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> of the
          <code>InteractionAffordance</code> <a href="#dfn-class" class="internalDFN" data-link-type="dfn">Class</a> and
          the <code>DataSchema</code> <a href="#dfn-class" class="internalDFN" data-link-type="dfn">Class</a>.
          <span class="rfc2119-assertion" id="td-op-for-property">When a Form instance is within a
          <code>PropertyAffordance</code> instance, the value
          assigned to <code>op</code> <em class="rfc2119" title="MUST">MUST</em> be one of <code>readproperty</code>,
          <code>writeproperty</code>, <code>observeproperty</code>,
          <code>unobserveproperty</code> or an <a href="#dfn-array" class="internalDFN" data-link-type="dfn">Array</a>
          containing a combination of these terms.</span></p><p class="note">
		  It is considered to be good practice that each <code>observeproperty</code> has a corresponding
		  <code>unobserveproperty</code> unless the protocol supports implicit unsubscription mechanisms
		  (e.g., heartbeat to detect connection loss).</p><p class="note">
		  The observation mechanism depends on the underlying protocol or sub-protocol. Having said that, it is not 
          guaranteed that the current <a>Property</a> value will be provided once the subscription is initiated. Hence, it may be 
          necessary to read the current <a>Property</a> value before/after the subscription to get a first value. 
          </p>"""^^rdf:HTML .
		  
:ActionAffordanceShape a sh:NodeShape ;
    sh:targetClass td:ActionAffordance ;
    skos:definition """An Interaction Affordance that allows to invoke a
          function of the Thing, which manipulates state (e.g.,
          toggling a lamp on or off) or triggers a process on the
          Thing (e.g., dim a lamp over time)."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 4 ;
    sh:property [
        sh:path td:hasInputSchema ;
        skos:definition """Used to define the input data schema of the
                Action."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path td:hasOutputSchema ;
        skos:definition """Used to define the output data schema of the
                Action."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path td:isSafe ;
        skos:definition """Signals if the Action is safe (=true) or not.
                Used to signal if there is no internal state (cf.
                resource state) is changed when invoking an Action.
                In that case responses can be cached as
                example."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path td:isIdempotent ;
        skos:definition """Indicates whether the Action is idempotent
                (=true) or not. Informs whether the Action can be
                called repeatedly with the same result, if present,
                based on the same input."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path td:isSynchronous ;
        skos:definition """Indicates whether the action is synchronous (=true) or not. 
                A synchronous action means that the response of action contains all the information 
                about the result of the action and no further querying about the status of the action 
                is needed. Lack of this keyword means that no claim on the synchronicity of the 
                action can be made."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:maxCount 1 ;
        sh:order 5 ;
    ] ;
    skos:scopeNote """<p><code>ActionAffordance</code> is a <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> of the
          <code>InteractionAffordance</code> <a href="#dfn-class" class="internalDFN" data-link-type="dfn">Class</a>.
          <span class="rfc2119-assertion" id="td-op-for-action">When a Form instance is within an
          <code>ActionAffordance</code> instance, the value
          assigned to op <em class="rfc2119" title="MUST">MUST</em>
          either be <code>invokeaction</code>, <code>queryaction</code>, 
          <code>cancelaction</code> or an 
          <a href="#dfn-array" class="internalDFN" data-link-type="dfn">Array</a>
          containing a combination of these terms.
          </span></p>"""^^rdf:HTML .
    
:EventAffordanceShape a sh:NodeShape ;
    sh:targetClass td:EventAffordance ;
    skos:definition """An Interaction Affordance that describes an event
          source, which asynchronously pushes event data to
          <a href="#dfn-consumer" class="internalDFN" data-link-type="dfn">Consumers</a> (e.g., overheating
          alerts)."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 5 ;
    sh:property [
        sh:path td:hasSubscriptionSchema ;
        skos:definition """Defines data that needs to be passed upon
                subscription, e.g., filters or message format for
                setting up Webhooks."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path td:hasNotificationSchema ;
        skos:definition """Defines the data schema of the Event instance
                messages pushed by the Thing."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path td:hasNotificationResponseSchema ;
        skos:definition """Defines the data schema of the Event response messages sent by the consumer in a response to a data message."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path td:hasCancellationSchema ;
        skos:definition """Defines any data that needs to be passed to
                cancel a subscription, e.g., a specific message to
                remove a Webhook."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    skos:scopeNote """<p><code>EventAffordance</code> is a <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> of the
          <code>InteractionAffordance</code> <a href="#dfn-class" class="internalDFN" data-link-type="dfn">Class</a>.
          <span class="rfc2119-assertion" id="td-op-for-event">When
          a Form instance is within an <code>EventAffordance</code>
          instance, the value assigned to <code>op</code>
          <em class="rfc2119" title="MUST">MUST</em> be either
          <code>subscribeevent</code>,
          <code>unsubscribeevent</code>, or both terms within an
          <a href="#dfn-array" class="internalDFN" data-link-type="dfn">Array</a>.</span></p><p class="note">
		  It is considered to be good practice that each <code>subscribeevent</code> has a corresponding <code>unsubscribeevent</code> unless the protocol
		  supports implicit unsubscription mechanisms (e.g., heartbeat to detect connection loss).</p>"""^^rdf:HTML .

:MultiLanguageShape a sh:NodeShape ;
    sh:targetClass td:MultiLanguage ;
    skos:definition """<p>A <a>Map</a> providing a set of human-readable texts in different languages identified by language tags described in [[BCP47]]. See <a href="#titles-descriptions-serialization-json"></a> for example usages of this container in a Thing Description instance.</p>
            <p><span class="rfc2119-assertion" id="td-multilanguage-language-tag">Each name of the <code>MultiLanguage</code> <a>Map</a> MUST be a language tag as defined in [[!BCP47]].</span>
            <span class="rfc2119-assertion" id="td-multilanguage-value"> Each value of the <code>MultiLanguage</code> <a>Map</a> MUST be of type <code>string</code>. </span> </p>"""^^rdf:HTML ;
    sh:closed false ;
    sh:order 18 .



:VersionInfoShape a sh:NodeShape ;
    sh:targetClass td:VersionInfo ;
    skos:definition """Metadata of a Thing that provides version information
          about the TD document. If required, additional version
          information such as firmware and hardware version (term
          definitions outside of the TD namespace) can be extended
          via the <a href="#dfn-context-ext" class="internalDFN" data-link-type="dfn">TD Context Extension</a>
          mechanism."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 8 ;
    sh:property [
        sh:path td:instance ;
        skos:definition """Provides a version indicator of this TD.
                """^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path td:model ;
        skos:definition """Provides a version indicator of the underlying TM.
                """^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    skos:scopeNote """<p>It is recommended that the values within <code>instances</code> and <code>model</code> of
          the <code>VersionInfo</code> <a href="#dfn-class" class="internalDFN" data-link-type="dfn">Class</a> follow the
          semantic versioning pattern, where a sequence of three
          numbers separated by a dot indicates the major version,
          minor version, and patch version, respectively. See
          [<cite><a class="bibref" data-link-type="biblio" href="#bib-semver" title="Semantic Versioning 2.0.0">SEMVER</a></cite>] for
          details.</p>"""^^rdf:HTML .

:FormShape a sh:NodeShape ;
    sh:targetClass hctl:Form ;
    skos:definition """A form can be viewed as a statement of "To perform an
          <b><em>operation type</em></b> operation on <b><em>form
          context</em></b>, make a <b><em>request method</em></b>
          request to <b><em>submission target</em></b>" where the
          optional <b><em>form fields</em></b> may further describe
          the required request. In Thing Descriptions, the
          <b><em>form context</em></b> is the surrounding Object,
          such as Properties, Actions, and Events or the Thing
          itself for meta-interactions."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 7 ;
    sh:property [
        sh:path hctl:hasTarget ;
        skos:definition """Target IRI of a link or submission target of a
                form."""^^rdf:HTML ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:nodeKind sh:IRI ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path hctl:forContentType ;
        skos:definition """Assign a content type based on a media type
                (e.g., <code>text/plain</code>) and potential
                parameters (e.g., <code>charset=utf-8</code>) for
                the media type [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc2046" title="Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types">RFC2046</a></cite>]."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:defaultValue "application/json"^^xsd:string ;
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path hctl:forContentCoding ;
        skos:definition """Content coding values indicate an encoding
                transformation that has been or can be applied to a
                representation. Content codings are primarily used
                to allow a representation to be compressed or
                otherwise usefully transformed without losing the
                identity of its underlying media type and without
                loss of information. Examples of content coding
                include "gzip", "deflate", etc. ."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path hctl:returns ;
        skos:definition """This optional term can be used if, e.g., the
                output communication metadata differ from input
                metadata (e.g., output contentType differ from the
                input contentType). The response name contains
                metadata that is only valid for the primary response
                messages."""^^rdf:HTML ;
        sh:node :ExpectedResponseShape ;
        sh:maxCount 1 ;
        sh:order 8 ;
    ] ;
    sh:property [
        sh:path hctl:additionalReturns ;
        skos:definition """This optional term can be used if additional expected responses
                are possible, e.g. for error reporting.  Each additional response needs to be 
                distinguished from others in some way (for example, by specifying
                a protocol-specific error code), and may also have its own data schema."""^^rdf:HTML ;
        sh:node :AdditionalExpectedResponseShape ;
        sh:order 9 ;
    ] ;
    sh:property [
        sh:path hctl:hasOperationType ;
        skos:definition """Indicates the semantic intention of performing
                the operation(s) described by the form. For
                example, the Property interaction allows get and
                set operations. The protocol binding may contain a
                form for the get operation and a different form for
                the set operation. The op attribute indicates which
                form is for which and allows the client to select
                the correct form for the operation required. op can
                be assigned one or more interaction verb(s) each
                representing a semantic intention of an
                operation."""^^rdf:HTML ;
        sh:in (
            td:readProperty
            td:writeProperty
            td:observeProperty
            td:unobserveProperty
            td:invokeAction
            td:queryAction
            td:cancelAction
            td:subscribeEvent
            td:unsubscribeEvent
            td:readAllProperties
            td:writeAllProperties
            td:readMultipleProperties
            td:writeMultipleProperties
            td:observeAllProperties
            td:unobserveAllProperties
            td:subscribeAllEvents
            td:unsubscribeAllEvents
            td:queryAllActions
        );
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path hctl:forSubProtocol ;
        skos:definition """Indicates the exact mechanism by which an
                interaction will be accomplished for a given
                protocol when there are multiple options. For
                example, for HTTP and Events, it indicates which of
                several available mechanisms should be used for
                asynchronous notifications such as long polling
                (<code>longpoll</code>), WebSub [<cite><a class="bibref" data-link-type="biblio" href="#bib-websub" title="WebSub">websub</a></cite>]
                (<code>websub</code>), Server-Sent Events
                (<code>sse</code>) [<cite><a class="bibref" data-link-type="biblio" href="#bib-html" title="HTML Standard">html</a></cite>] (also known as
                EventSource). Please note that there is no
                restriction on the subprotocol selection and other
                mechanisms can also be announced by this
                subprotocol term."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        skos:example (
            "longpoll"
            "websub"
            "sse"
        ) ;
        sh:order 5 ;
    ] ;
    sh:property [
        sh:path td:hasSecurityConfiguration ;
        skos:definition """Set of security definition names, chosen from
                those defined in <code>securityDefinitions</code>.
                These must all be satisfied for access to resources."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        #sh:node :SecuritySchemeShape ;
        sh:order 6 ;
    ] ;
    sh:property [
        sh:path wotsec:scopes ;
        skos:definition """Set of authorization scope identifiers provided
                as an array. These are provided in tokens returned
                by an authorization server and associated with
                forms in order to identify what resources a client
                may access and how. The values associated with a
                form should be chosen from those defined in an
                <code>OAuth2SecurityScheme</code> active on that
                form."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:order 7 ;
    ] ;
    skos:scopeNote """<p>Possible values for the <code>contentCoding</code>
          property can be found, e.g., in the <a href=
          "https://www.iana.org/assignments/http-parameters/http-parameters.xhtml#content-coding">
          IANA HTTP content coding registry</a>.</p>
          <p>The list of possible operation types of a form is
          fixed. As of this version of the specification, it only
          includes the well-known types necessary to implement the
          WoT interaction model described in [<cite><a class=
          "bibref" data-link-type="biblio" href=
          "#bib-wot-architecture11" title=
          "Web of Things (WoT) Architecture 1.1">wot-architecture11</a></cite>].
          Future versions of the standard may extend this list but
          <span class="rfc2119-assertion" id=
          "well-known-operation-types-only">operations types
          <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> be
          arbitrarily set by servients and be restricted to the values in the
          table below.</span></p>

        <div id="table-operation-types">
          <table class="def">
            <thead>
              <tr>
                <th>Operation Type</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>readproperty</td>
                <td>Identifies the read operation on
                  Property Affordances to retrieve the
                  corresponding data.</td>
              </tr>
              <tr>
                <td>writeproperty</td>
                <td>Identifies the write operation on
                  Property Affordances to update the
                  corresponding data.</td>
              </tr>
              <tr>
                <td>observeproperty</td>
                <td>Identifies the observe operation on
                  Property Affordances to be notified with
                  the new data when the Property is
                  updated.</td>
              </tr>
              <tr>
                <td>unobserveproperty</td>
                <td>Identifies the unobserve
                  operation on Property Affordances to stop
                  the corresponding notifications.</td>
              </tr>
              <tr>
                <td>invokeaction</td>
                <td>Identifies the invoke operation on
                  Action Affordances to perform the
                  corresponding action.</td>
              </tr>
              <tr>
                <td>queryaction</td>
                <td>Identifies the querying operation on
                  Action Affordances to get the status of the
                  corresponding action.</td>
              </tr>
              <tr>
                <td>cancelaction</td>
                <td>Identifies the cancel operation on
                  Action Affordances to cancel the ongoing
                  corresponding action.</td>
              </tr>
              <tr>
                <td>subscribeevent</td>
                <td>Identifies the subscribe operation
                  on Event Affordances to be notified by
                  the Thing when the event occurs.</td>
              </tr>
              <tr>
                <td>unsubscribeevent</td>
                <td>Identifies the unsubscribe
                  operation on Event Affordances to stop
                  the corresponding notifications.</td>
              </tr>
              <tr>
                <td>readallproperties</td>
                <td>Identifies the readallproperties
                  operation on a Thing to retrieve the
                  data of all Properties in a single interaction.</td>
              </tr>
              <tr>
                <td>writeallproperties</td>
                <td>Identifies the writeallproperties
                  operation on a Thing to update the
                  data of all writable Properties in a single interaction.</td>
              </tr>
              <tr>
                <td>readmultipleproperties</td>
                <td>Identifies the readmultipleproperties
                  operation on a Thing to retrieve the
                  data of selected Properties in a single interaction.</td>
              </tr>
              <tr>
                <td>writemultipleproperties</td>
                <td>Identifies the writemultipleproperties
                  operation on a Thing to update the
                  data of selected writable Properties in a single interaction.</td>
              </tr>
                <td>observeallproperties</td>
                <td>Identifies the observeallproperties operation on
                  Properties to be notified with new data when any Property is
                  updated.</td>
              </tr>
              </tr>
                <td>unobserveallproperties</td>
                <td>Identifies the unobserveallproperties operation on
                  Properties to stop notifications from all Properties in a 
                  single interaction.</td>
              </tr>
              </tr>
                <td>queryallactions</td>
                <td>Identifies the queryallactions operation on a Thing to get the status of
                 all Actions in a single interaction.</td>
              </tr>
              </tr>
                <td>subscribeallevents</td>
                <td>Identifies the subscribeallevents operation on Events to subscribe
                  to notifications from all Events in a single interaction.</td>
              </tr>
              </tr>
                <td>unsubscribeallevents</td>
                <td>Identifies the unsubscribeallevents operation on Events to unsubscribe
                  from notifications from all Events in a single interaction.</td>
              </tr>
            </tbody>
          </table>
        </div>

        <p>
          A <a>Thing Description</a> of a WoT producer may have multiple forms entries with, e.g., different 
          protocol and/or content types declarations that a <a>Consumer</a> could possibly support. In that case 
          the Consumer may choose any form entry that works (e.g., the protocol and content type is supported) for them. 
          When one form is chosen, it is expected that the <a>Consumer</a> will continue to use it as long as possible 
          for every new interaction with the WoT producer.
        </p>

        <section id="sec-op-data-schema-mapping" class="informative">
        <h4>Mapping op Values to Data Schemas</h4>

        <p>
            Protocols that can be used with TDs follow request-response or eventing mechanisms. 
            The Data Schema of an affordance generally correlates with the <code>op</code> keywords used in <code>forms</code>.
            The table below informatively summarizes the available data schema related terms with the <code>op</code> keywords.

            <ul>
                <li>Consumer to Thing applies for messages sent by the Consumer to the Thing, such as the value for writing a property.</li>
                <li>Thing to Consumer applies for messages sent by the Thing to the Consumer, such as the value of a property value as the result of reading a property.</li>
                <li>In case that there is no correlation with the data schema and the operation, it implies that no payload is required for executing the operation or no 
                payload is expected as a result of the operation.</li>
            </ul>

            <table class="def">
            <thead>
              <tr>
                <th>Operation Type</th>
                <th>Consumer to Thing DataSchema Correlation</th>
                <th>Thing to Consumer DataSchema Correlation</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>readproperty</td>
                <td>No correlation.</td>
                <td>All fields in the Property Affordance without <code>"writeOnly":true</code>.</td>
              </tr>
              <tr>
                <td>writeproperty</td>
                <td>All fields in the Property Affordance without <code>"readOnly":true</code>.</td>
                <td>No correlation. <code>additionalResponses</code> can be used in the form level.</td>
              </tr>
              <tr>
                <td>observeproperty</td>
                <td>No correlation.</td>
                <td>All fields in the Property Affordance without <code>"writeOnly":true</code>.</td>
              </tr>
              <tr>
                <td>unobserveproperty</td>
                <td>No correlation.</td>
                <td>No correlation.</td>
              </tr>
              <tr>
                <td>invokeaction</td>
                <td>Value of the <code>input</code> key.</td>
                <td>Value of the <code>output</code> key.</td>
              </tr>
              <tr>
                <td>queryaction</td>
                <td>No correlation.</td>
                <td>No correlation. <code>additionalResponses</code> can be used in the form level.</td>
              </tr>
              <tr>
                <td>cancelaction</td>
                <td>No correlation.</td>
                <td>No correlation. <code>additionalResponses</code> can be used in the form level.</td>
              </tr>
              <tr>
                <td>subscribeevent</td>
                <td>Value of the <code>subscription</code> key with all fields without <code>"readOnly":true</code></td>
                <td>Value of the <code>subscription</code> key with all fields without <code>"writeOnly":true</code></td>
              </tr>
              <tr>
                <td>unsubscribeevent</td>
                <td>Value of the <code>subscription</code> key with all fields without <code>"readOnly":true</code></td>
                <td>Value of the <code>subscription</code> key with all fields without <code>"writeOnly":true</code></td>
              </tr>
            </tbody>
            </table>
        </p>
        <p class="ednote" title="Data Schemas of meta operations">
            The data schemas for meta operations such as <code>readallproperties</code> is currently under discussion.
        </p>
        </section>

        <section id="sec-response-usage">
        <h4>Response-related Terms Usage</h4>

          <p>The optional <code>response</code> name-value pair can
          be used to provide metadata for the expected response
          message. 
          With the core vocabulary, it only includes
          content type information, but TD Context Extensions could
          be applied. <span class="rfc2119-assertion" id=
          "td-expectedResponse-default-contentType">If no
          <code>response</code> name-value pair is provided, it
          <em class="rfc2119" title="MUST">MUST</em> be assumed
          that the content type of the response is equal to the
          content type assigned to the Form instance.</span> Note
          that <code>contentType</code> within an
          <code>ExpectedResponse</code> 
          <a href="#dfn-class" class=
          "internalDFN" data-link-type="dfn">Class</a> does not
          have a <a href="#dfn-default-value" class="internalDFN"
          data-link-type="dfn">Default Value</a>. For instance, if
          the value of the content type of the form is
          <code>application/xml</code> the assumed value of the
          content type of the response will be also
          <code>application/xml</code>.</p>
          <p>
          In some cases additional responses might be possible.
          One example of this is error responses but in some cases
          there might also be additional successful responses.
          In this case, the <code>response</code> name-value pair
          is still used for the primary response but 
          <code>additionalResponses</code> may also be provided,
          whose value is an array of <code>AdditionalExpectedResponse</code>
          objects.
          Each additional response must be distinguished in some way from the primary
          response, either by <code>contentType</code> or by
          protocol-specific settings such as error code header values.
          Each additional response may also have a data schema
          which can differ from the normal output data schema for the
          interaction.  
          </p>
          <p>In some use cases, input and output data might be
          represented in a different form, for instance an Action
          that accepts JSON, but returns an image. In such a case,
          the optional <code>response</code> name-value pair can
          describe the content type of the expected response.
          <span class="rfc2119-assertion" id=
          "td-expectedResponse-contentType">If the content type of
          the expected response differs from the content type of
          the form, the <code>Form</code> instance <em class=
          "rfc2119" title="MUST">MUST</em> include a name-value
          pair with the name <code>response</code>.</span> 
          For instance, an <code>ActionAffordance</code> could only
          accept <code>application/json</code> for its input data,
          while it will respond with an <code>image/jpeg</code>
          content type for its output data. In that case the
          content types differ and the <code>response</code>
          name-value pair has to be used to provide response
          content type (<code>image/jpeg</code>) information to the
          <a href="#dfn-consumer" class="internalDFN"
          data-link-type="dfn">Consumer</a>.</p>
          <p>
          Similar considerations apply to additional responses,
          although in this case the <code>contentType</code> is optional
          if it is the same as the input content Type (e.g. JSON).
          <span class="rfc2119-assertion" id=
          "td-additionalExpectedResponse-contentType">If the content type of
          an additional expected response differs from the content type of
          the form, the <code>Form</code> instance <em class=
          "rfc2119" title="MUST">MUST</em> include an entry in the array
          associated with the name <code>additionalResponses</code>
          that includes a value for the name <code>contentType</code>.</span> 
          <span class="rfc2119-assertion" id=
          "td-additionalExpectedResponse-schema">If the data schema of
          an additional expected response differs from the output data schema of
          the interaction, the <code>Form</code> instance <em class=
          "rfc2119" title="MUST">MUST</em> include an entry in the array
          associated with the name <code>additionalResponses</code> that
          includes a value for the name <code>schema</code>.</span> 
          </p>
          <p>
            The different cases on the variation of request and response are explained above.
            The tables at <a href="#contentType-usage"></a> summarize these cases in a concise manner.
          </p>
          </section>
          """^^rdf:HTML .
    
:LinkShape a sh:NodeShape ;
    sh:targetClass hctl:Link ;
    skos:definition """A link can be viewed as a statement of the form
          "<b><em>link context</em></b> has a <b><em>relation
          type</em></b> resource at <b><em>link target</em></b>",
          where the optional <b><em>target attributes</em></b> may
          further describe the resource."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 6 ;
    sh:property [
        sh:path hctl:hasTarget ;
        skos:definition """Target IRI of a link or submission target of a
                form."""^^rdf:HTML ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:nodeKind sh:IRI ;
        #sh:datatype xsd:string ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path hctl:hintsAtMediaType ;
        skos:definition """Target attribute providing a hint indicating
                what the media type [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc2046" title="Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types">RFC2046</a></cite>]
                of the result of dereferencing the link should
                be."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path hctl:hasRelationType ;
        skos:definition """A link relation type identifies the semantics
                of a link."""^^rdf:HTML ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
       #sh:nodeKind sh:IRI ; # TODO could be relaxed
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path hctl:hasAnchor ;
        skos:definition """Overrides the link context (by default the
                Thing itself identified by its <code>id</code>)
                with the given URI or IRI."""^^rdf:HTML ;
        sh:node sh:IRI ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path hctl:hasSizes ;
        skos:definition """Target attribute that specifies one or more sizes for the referenced icon. 
                    Only applicable for relation type \"icon\". The value pattern follows 
                    {Height}x{Width} (e.g., \"16x16\", \"16x16 32x32\")."""^^rdf:HTML ;
        #sh:nodeKind sh:IRI ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 5 ;
    ] ;
    sh:property [
        sh:path hctl:hasHreflang ;
        skos:definition """The hreflang attribute specifies the language of a linked document. The value of this must be a valid language tag [[BCP47]]."""^^rdf:HTML ;
        #sh:nodeKind sh:IRI ;
        sh:datatype xsd:string ;
        sh:order 6 ;
    ] ;
    skos:scopeNote """<p class="ednote" title="hreflang type">
        The <code>hreflang</code> attribute is allowed to be a <code>string</code> or <code>array</code> in this version of the spec. Depending on the result of [[LINKSET-MEDIA-TYPES]] the values of <code>hrefLang</code> can be restricted to <code>array</code> only.
	</p>
     <p>Link relations can be used to describe relations such as to other Things (e.g., a Switch Thing controls a Lamp Thing), to a specific kind of Thing Models (e.g., a Thing Description
    is an instance of a specific Thing Model), or to further documentations information (e.g., device manual of a Thing). It is recommended to reuse existing and established 
    <a href="https://www.iana.org/assignments/link-relations">Link Relation definitions from IANA.</a>
    </p>
        <p>In the following a best practice relation type table is introduced that is recommended to use within WoT <a>Thing Description</a>
    or <a>Thing Model</a> instances.      
    </p>
    <table class="def">
        <thead>
            <tr>
                <th>Value</th>                
                <th>Occurrence</th>
                <th>Explanation</th>
                <th>Source of value origin</th>
            </tr>
        </thead>
        <tbody>
            <tr >
                <td>
                    <code>icon</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Imports an icon associated to the <a>Thing</a> (e.g., for UI purposes).</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr >
                <td>
                    <code>service-doc</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Relation to a resource that provide (human-readable) documentation or descriptions.</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr >
                <td>
                    <code>alternate</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Point to alternative representation of the <a>Thing</a> (i.e. RDF-Turtle, human-readable HTML document, ...).</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr >
                <td>
                    <code>type</code>
                </td>
                <td>
                    0..1
                </td>
                <td>Indicate that the <a>Thing</a> is an instance of the target resource such as to a <a>Thing Model</a>.</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr >
                <td>
                    <code>tm:extends</code>
                </td>
                <td>
                    0..1
                </td>
                <td>Extends an existing definition of the target resource such as a <a>Thing Model</a>. Only applicable for Thing Model definitions.</td>
                <td>
                    W3C WoT Thing Model
                </td>
            </tr>
            <tr >
                <td>
                    <code>tm:submodel</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Used to compose one or multiple <a>Thing Models</a>. Only applicable for Thing Model definitions.</td>
                <td>
                    W3C WoT Thing Model
                </td>
            </tr>                         
            <tr >
                <td>
                    <code>manifest</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Point to the web app manifest of a web application which provides, e.g., a user interface with which a user can interact with the Thing (also see [[APPMANIFEST]]).</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr>
                <td>
                    <code>proxy-to</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Target resource provide the address of a proxy.</td>
                <td>
                    W3C WoT Security and WoT Binding Template
                </td>
            </tr>
            <tr>
                <td>
                    <code>collection</code>
                </td>
                <td>
                    0..1
                </td>
                <td>Points to a collections of <a>Things</a>.</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr>
                <td>
                    <code>item</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Points to a <a>Thing</a> that is member of the current <a>Thing</a> collections.</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr>
                <td>
                    <code>predecessor-version</code>
                </td>
                <td>
                    0..1
                </td>
                <td>Points to a previous <a>Thing Description</a> or <a>Thing Model</a> version.</td>
                <td>
                    <a href="https://www.iana.org/assignments/link-relations">IANA Link Relation</a>
                </td>
            </tr>
            <tr>
                <td>
                    <code>controlledBy</code>
                </td>
                <td>
                    0..*
                </td>
                <td>Refers to a <a>Thing</a> that controls the context <a>Thing</a>.</td>
                <td>
                    W3C Thing Description
                </td>
            </tr>
        </tbody>
    </table>
    """^^rdf:HTML .
    

:ExpectedResponseShape a sh:NodeShape ;
    sh:targetClass hctl:ExpectedResponse ;
    skos:definition """Communication metadata describing the expected
          response message for the primary response."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 9 ;
    sh:property [
        sh:path hctl:forContentType ;
        skos:definition """Assign a content type based on a media type
                (e.g., <code>text/plain</code>) and potential
                parameters (e.g., <code>charset=utf-8</code>) for
                the media type [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc2046" title="Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types">RFC2046</a></cite>]."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
    ] .

:AdditionalExpectedResponseShape a sh:NodeShape ;
    sh:targetClass hctl:AdditionalExpectedResponse ;
    skos:definition """Communication metadata describing the expected
          response message for additional responses."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 10 ;
    sh:property [
        sh:path hctl:hasAdditionalOutputSchema ;
        skos:definition """Used to define the output data schema 
                for an additional response if it differs from the default
                output data schema. 
                Rather than a <code>DataSchema</code> object, the
                name of a previous definition given in a 
                <code>schemaDefinitions</code> map must be used."""^^rdf:HTML ;
        # sh:node :DataSchemaShape ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path hctl:isSuccess ;
        skos:definition """Signals if an additional response should not be considered an error."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path hctl:forContentType ;
        skos:definition """Assign a content type based on a media type
                (e.g., <code>text/plain</code>) and potential
                parameters (e.g., <code>charset=utf-8</code>) for
                the media type [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc2046" title="Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types">RFC2046</a></cite>]."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
    ] .

:SecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:SecurityScheme ;
    skos:definition """<p>Metadata describing the configuration of a security
          mechanism. <span class="rfc2119-assertion" id="td-security-scheme-name">The value assigned to the name
          <code>scheme</code> <em class="rfc2119" title="MUST">MUST</em> be defined within a 
          <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary</a>
          included in the <a href="#dfn-thing-description" class="internalDFN" data-link-type="dfn">Thing Description</a>,
          either in the standard <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary</a> defined
          in <a href="#sec-vocabulary-definition" class="sec-ref">§&nbsp;<bdi class="secno">5.</bdi> TD
          Information Model</a> or in a <a href="#dfn-context-ext" class="internalDFN" data-link-type="dfn">TD Context
          Extension</a>.</span>
          </p><p>
          <span class="rfc2119-assertion" id="td-security-no-secrets">For all security schemes,
          any keys, passwords, or other sensitive information directly providing access 
          <em class="rfc2119" title="MUST NOT">MUST NOT</em> be stored in the TD and should instead
          be shared and stored out-of-band via other mechanisms.</span> 
          The purpose of a TD is to describe how to access a Thing if and only if a Consumer 
          already has authorization, and is not meant be used to grant that authorization.
          </p><p>Each security scheme object used in a TD defines a set of requirements to be met before access can be granted.
          We say a security scheme is <em>satisfied</em> when all its requirements are met.
          In some cases requirements from multiple security schemes will have to be met before access can be granted.
          </p><p>
          Security schemes generally may require additional authentication
          parameters, such as a password or key.
          The location of this information is indicated by the
          value associated with the name <code>in</code>, often in combination with the value associated with <code>name</code>.
          The value associated with <code>in</code> can take one of the following values:
          <dl>
          <dt><code>header</code>:</dt>
          <dd>The parameter will be given
            in a header provided by the protocol, with the name of the header
            provided by the value of <code>name</code>.</dd>
          <dt><code>query</code>:</dt>
          <dd>The parameter will be appended to the URI as a query parameter, with the name of the 
            query parameter provided by <code>name</code>.</dd>
          <dt><code>body</code>:</dt>
          <dd>The parameter will be provided in the body of the request payload, with the data schema element  
            used provided by <code>name</code>.
            <span class="rfc2119-assertion" id="sec-body-name-json-pointer">When used in the context of a 
            <code>body</code> security information location, the value of <code>name</code> 
            <em class="rfc2119" title="MUST">MUST</em> be in the form of a JSON pointer [[!RFC6901]] relative to 
            the root of the input <code>DataSchema</code> for each interaction it is used with.</span> 
            Since this value is not a fragment identifier, and is not relative to the root of the TD but
            to whichever data schemas the security scheme is bound to, this value should not start with <code>#</code>;
            it is a "pure" JSON pointer.
            Since this value is not a fragment identifier, it also does not
            need to URL-encode special characters.
            The targeted element may or may not already exist at the specified location in the referenced data schema.
            If it does not, it will be inserted. This avoids having to duplicate definitions in the data schemas of
            every interaction.
            <span class="rfc2119-assertion" id="sec-body-name-json-pointer-creatable">When an element
            of a data schema indicated by a JSON pointer indicated in a <code>body</code> locator
            does not already exist in the indicated schema, it
            <em class="rfc2119" title="MUST">MUST</em> 
            be possible to insert the indicated element
            at the location indicated by the pointer.</span>
            <span class="rfc2119-assertion" id="sec-body-name-json-pointer-array">The JSON pointer
            used in the <code>body</code> locator 
            <em class="rfc2119" title="MAY">MAY</em> 
            use the "<code>-</code>" character to indicate a non-existent array element when 
            it is necessary to insert an element after the last element of an existing array.
            </span>
            <span class="rfc2119-assertion" id="sec-body-name-json-pointer-type">The element referenced
            (or created) by a 
            <code>body</code> security information location
            <em class="rfc2119" title="MUST">MUST</em> be required and of type "<code>string</code>".</span> 
            If <code>name</code> is not given, it is assumed the entire body
            is to be used as the security parameter.
          </dd>
          <dt><code>cookie</code>:</dt>
          <dd>The parameter is stored in a cookie identified by the value of   
            <code>name</code>.
          </dd>
          <dt><code>uri</code>:</dt>
          <dd>The parameter is embedded in the URI itself, which is encoded in the
          relevant interaction using a URI template variable defined by the value of <code>name</code>.
          This is more general than the <code>query</code> mechanism but more complex. 
          <span class="rfc2119-assertion" id="td-security-in-query-over-uri">The value <code>uri</code> 
          <em class="rfc2119" title="SHOULD">SHOULD</em> be specified 
          for the name <code>in</code> in a security scheme only if
          <code>query</code> is not applicable.</span>  
          <span class="rfc2119-assertion" id="td-security-in-uri-variable">The URIs provided
          in interactions where a security scheme using <code>uri</code> as the value for <code>in</code>
          <em class="rfc2119" title="MUST">MUST</em> be a URI template including the defined variable.
          </span>  
          </dd>
          <dt><code>auto</code>:</dt>
          <dd>The location is determined as part of the protocol, or negotiated. 
          <span class="rfc2119-assertion" id="sec-security-vocab-auto-in-no-name">If a value of <code>auto</code> 
          is set for the <code>in</code> field of a <code>SecurityScheme</code>, 
          then the <code>name</code> field SHOULD NOT be set.</span> 
          In this case, the application of the <code>SecurityScheme</code> is subject to 
          the respective specification for the given protocol (e.g. [[!RFC8288]] when using the 
          <code>BasicSecurityScheme</code> with HTTP).
          </dd>
          </dl>
          If multiple parameters are needed for a security scheme, repeat the security scheme definition for
          each parameter and combine them using a <code>combo</code> security scheme and <code>allOf</code>.
          In some cases parameters may not actually be secret but a user may wish to leave them
          out of the TD to help protect privacy.  As an example of this, some security mechanisms
          require both a client identifier and a secret key.  In theory, the client identifier is 
          public however it may be hard to update and pose a tracking risk.  In such a case it can
          be provided as an additional security parameter so it does not appear in the TD.
          </p><p>
          <span class="rfc2119-assertion" id="td-security-uri-variables-distinct">The names of URI variables 
          declared in a <code>SecurityScheme</code> 
          <em class="rfc2119" title="MUST">MUST</em> be distinct from all other URI variables 
          declared in the TD.</span></p>"""^^rdf:HTML ;
    sh:closed false ;
    sh:order 1 ;
    sh:property [
        sh:path rdf:type ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        skos:definition """Identification of the security mechanism being
                configured."""^^rdf:HTML ;
        # FIXME declare securityDefinitions as @included
        # sh:minCount 1 ;
        skos:example (
            wotsec:NoSecurityScheme
            wotsec:ComboSecurityScheme
            wotsec:BasicSecurityScheme
            # wotsec:CertSecurityScheme
            wotsec:DigestSecurityScheme
            wotsec:BearerSecurityScheme
            # wotsec:PoPSecurityScheme
            wotsec:PSKSecurityScheme
            # wotsec:PublicSecurityScheme
            wotsec:OAuth2SecurityScheme
            wotsec:APIKeySecurityScheme
            wotsec:AutoSecurityScheme
        );
        sh:order 1 ;
    ] ;
    sh:property _:description ;
    sh:property _:descriptions ;
    sh:property [
        sh:path wotsec:proxy ;
        skos:definition """URI of the proxy server this security
                configuration provides access to. If not given, the
                corresponding security configuration is for the
                endpoint."""^^rdf:HTML ;
        sh:nodeKind sh:IRI ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] .

:NoSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:NoSecurityScheme ;
    skos:definition """A security configuration corresponding to identified
          by the <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary Term</a>
          <code>nosec</code> (i.e., <code>"scheme":
          "nosec"</code>), indicating there is no authentication or
          other mechanism required to access the resource."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 2 .

:AutoSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:AutoSecurityScheme ;
    skos:definition """An automatic authentication security configuration identified by the term <code>auto</code> (i.e., <code>\"scheme\": \"auto\"</code>). This scheme indicates that the security parameters are going to be negotiated by the underlying protocols at runtime, subject to the respective specifications for the protocol (e.g. [[!RFC8288]] for Basic Authentication when using HTTP)."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 3 .

:ComboSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:ComboSecurityScheme ;
    skos:definition """A combination of other security schemes identified by the <a>Vocabulary Term</a> <code>combo</code> (i.e., <code>"scheme": "combo"</code>).  Elements of this scheme define various ways in which other named schemes defined in <code>securityDefinitions</code>, including other <a href="#combosecurityscheme"><code>ComboSecurityScheme</code></a> definitions, are to be combined to create a new scheme definition.  <span class="rfc2119-assertion" id="td-security-combo-exclusive-oneof-or-allof">Exactly one of either <code>oneOf</code> or <code>allOf</code> MUST be included.</span> <!-- Redundant, table states "two or more" already <scan class="rfc2119-assertion">The array given as a value associated with either <code>oneOf</code> or <code>allOf</code> MUST have at least two elements.</scan> --> Only security scheme definitions which can be used together can be combined with <code>allOf</code>.  For example, it is not possible in general to combine different OAuth 2.0 flows together using <code>allOf</code> unless one applies to a proxy and one to the endpoint.  Note that when multiple named security scheme definitions are listed in a <code>security</code> field the same semantics apply as in an <code>allOf</code> combination (and the same limitations on allowable combinations).  The <code>oneOf</code> combination is equivalent to using different security schemes on forms that are otherwise identical.  In this sense a <code>oneOf</code> scheme is not an essential feature but it does avoid redundancy in such cases."""^^rdf:HTML ;
    skos:editorialNote "at risk" ;
    sh:closed false ;
    sh:order 4 ;
    # FIXME should be exactly one of oneOf or allOf
    sh:property _:oneOf ;
    sh:property _:allOf ;
    skos:scopeNote """<!-- <p class="ednote" title="Recursive Use">The 
<a href="#combosecurityscheme">ComboSecurityScheme</a> may be applied recursively to generate Boolean expressions for combinations of security schemes. One use case for this is when multiple security schemes are needed for a proxy in combination with multiple security schemes for an endpoint.  Suppose for example a proxy accepts either schemes A or B, and then the endpoint accepts either C or D.  Then the possible combinations are AC, AD, BC, and BD.  These could be expressed directly at the <code>Form</code> level but would require four-fold redundancy.  Instead, three <code>combo</code> nodes can be used to combine the four leaf schemes in the correct way into a single scheme.  It is not clear however if other use cases exist for deeper expression trees and if not, we may consider limiting the recursion depth to two.</p>-->"""^^rdf:HTML .

:BasicSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:BasicSecurityScheme ;
    skos:definition """Basic Authentication [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7617" title="The 'Basic' HTTP Authentication Scheme">RFC7617</a></cite>]
          security configuration identified by the <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary Term</a> <code>basic</code> (i.e.,
          <code>"scheme": "basic"</code>), using an unencrypted
          username and password."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 5 ;
    sh:property _:in ;
    sh:property _:name .

:DigestSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:DigestSecurityScheme ;
    skos:definition """Digest Access Authentication [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7616" title="HTTP Digest Access Authentication">RFC7616</a></cite>]
          security configuration identified by the <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary Term</a> <code>digest</code> (i.e.,
          <code>"scheme": "digest"</code>). This scheme is similar
          to basic authentication but with added features to avoid
          man-in-the-middle attacks."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 6 ;
    sh:property [
        sh:path wotsec:qop ;
        skos:definition """Quality of protection."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:in (
          "auth"
          "auth-int"
        );
        sh:defaultValue "auth"^^xsd:string ;
        sh:order 1 ;
    ] ;
    sh:property _:in ;
    sh:property _:name .

:APIKeySecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:APIKeySecurityScheme ;
    skos:definition """API key authentication security configuration
          identified by the <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary Term</a>
          <code>apikey</code> (i.e., <code>"scheme":
          "apikey"</code>). 
          This scheme is to be used when the access token is opaque,
          for example when a key in an unknown or proprietary format is provided by a cloud service provider.
          In this case the key may not be using a standard token format.
          This scheme indicates that the key provided by the service provider 
          needs to be supplied as part 
          of service requests using the mechanism indicated by the <code>\"in\"</code> field."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 7 ;
    sh:property _:apikeyIn ;
    sh:property _:name .

:BearerSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:BearerSecurityScheme ;
    skos:definition """Bearer Token [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc6750" title="The OAuth 2.0 Authorization Framework: Bearer Token Usage">RFC6750</a></cite>]
          security configuration identified by the <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary Term</a> <code>bearer</code> (i.e.,
          <code>"scheme": "bearer"</code>) for situations where
          bearer tokens are used independently of OAuth2. If the
          <code>oauth2</code> scheme is specified it is not
          generally necessary to specify this scheme as well as it
          is implied. For <code>format</code>, the value
          <code>jwt</code> indicates conformance with
          [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7519" title="JSON Web Token (JWT)">RFC7519</a></cite>],
          <code>jws</code> indicates conformance with
          [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7797" title="JSON Web Signature (JWS) Unencoded Payload Option">RFC7797</a></cite>],
          <code>cwt</code> indicates conformance with
          [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8392" title="CBOR Web Token (CWT)">RFC8392</a></cite>], and
          <code>jwe</code> indicates conformance with
          [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7516" title="JSON Web Encryption (JWE)">RFC7516</a></cite>], with
          values for <code>alg</code> interpreted consistently with
          those standards. <span class="rfc2119-assertion" id="td-security-bearer-format-extensions">Other formats and
          algorithms for bearer tokens <em class="rfc2119" title="MAY">MAY</em> be specified in vocabulary
          extensions</span>."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 8 ;
    sh:property _:authorization ;
    sh:property _:alg ;
    sh:property _:format ;
    sh:property _:in ;
    sh:property _:name .

# :CertSecuritySchemeShape a sh:NodeShape ;
#     sh:targetClass wotsec:CertSecurityScheme ;
#     skos:definition """TODO"""^^rdf:HTML ;
#     skos:editorialNote "at risk" ;
#     sh:closed false ;
#     sh:order 9 ;
#     sh:property _:identity .

:PSKSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:PSKSecurityScheme ;
    skos:definition """Pre-shared key authentication security configuration
          identified by the <a href="#dfn-vocab-term" class="internalDFN" data-link-type="dfn">Vocabulary Term</a>
          <code>psk</code> (i.e., <code>"scheme":
          "psk"</code>).
          This is meant to identify that a standard is used for pre-shared keys such as TLS-PSK [[RFC4279]], 
          and that the ciphersuite used for keys will be established during protocol negotiation."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 10 ;
    sh:property _:identity .

# :PublicSecuritySchemeShape a sh:NodeShape ;
#     sh:targetClass wotsec:PublicSecurityScheme ;
#     skos:definition """TODO"""^^rdf:HTML ;
#     skos:editorialNote "at risk" ;
#     sh:closed false ;
#     sh:order 11 ;
#     sh:property _:identity .

# :PoPSecuritySchemeShape a sh:NodeShape ;
#     sh:targetClass wotsec:PoPSecurityScheme ;
#     skos:definition """TODO"""^^rdf:HTML ;
#     skos:editorialNote "at risk" ;
#     sh:closed false ;
#     sh:order 12 ;
#     sh:property _:authorization ;
#     sh:property _:alg ;
#     sh:property _:format ;
#     sh:property _:in ;
#     sh:property _:name .

:OAuth2SecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:OAuth2SecurityScheme ;
    skos:definition """OAuth 2.0 authentication security configuration
            for systems conformant with [[!RFC6749]], [[!RFC8252]] and
            (for the <code>device</code> flow) [[!RFC8628]], identified
            by the <a>Vocabulary Term</a> <code>oauth2</code> (i.e.,
            <code>"scheme": "oauth2"</code>)."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 13 ;
    sh:property [
        sh:path wotsec:authorization ;
        skos:definition """URI of the authorization server. In the case of the <code>device</code> flow, the URI provided for the <code>authorization</code> value refers to the device authorization endpoint [[!RFC8628]]."""^^rdf:HTML ;
        sh:nodeKind sh:IRI ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path wotsec:token ;
        skos:definition """URI of the token server."""^^rdf:HTML ;
        sh:nodeKind sh:IRI ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path wotsec:refresh ;
        skos:definition """URI of the refresh server."""^^rdf:HTML ;
        sh:nodeKind sh:IRI ;
        sh:datatype xsd:anyURI ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path wotsec:scopes ;
        skos:definition """Set of authorization scope identifiers provided
                as an array. These are provided in tokens returned
                by an authorization server and associated with
                forms in order to identify what resources a client
                may access and how. The values associated with a
                form should be chosen from those defined in an
                <code>OAuth2SecurityScheme</code> active on that
                form."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path wotsec:flow ;
        skos:definition """Authorization flow."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        skos:example (
#            "implicit"
#            "password"
            "code"
            "client"
            "device"
        );
        sh:minCount 1 ;
        sh:order 5 ;
    ] ;
    skos:scopeNote """<p><span class="rfc2119-assertion" id="td-security-oauth2-code-flow">For
            the <code>code</code> flow both <code>authorization</code> and <code>token</code>
            MUST be included.</span> <span class="rfc2119-assertion" id="td-security-oauth2-client-flow">For
            the <code>client</code> flow <code>token</code> MUST be included.</span>
            <span class="rfc2119-assertion" id="td-security-oauth2-client-flow-no-auth">For the
            <code>client</code> flow <code>authorization</code> MUST NOT be included.</span>
            <span class="rfc2119-assertion" id="td-security-oauth2-device-flow">For the
            <code>device</code> flow both <code>authorization</code> and <code>token</code>
            MUST be included.</span> In the case of the <code>device</code> flow the value
            provided for <code>authorization</code> refers to the device authorization endpoint
            defined in [[!RFC8628]]. The mandatory elements for each flow are summarized in the
            following table:
            <table class="def"> <tr><th>Element</th><th><code>code</code></th><th><code>client</code></th><th><code>device</code></th></tr> <tr><td><code>authorization</code></td><td>mandatory</td><td>omit</td><td>mandatory; refers to device authorization endpoint</td></tr> <tr><td><code>token</code></td><td>mandatory</td><td>mandatory</td><td>mandatory</td></tr> <tr><td><code>refresh</code></td><td>optional</td><td>optional</td><td>optional</td></tr> </table>
            </p><!-- 
	    <p class="ednote"> Note that the <code>OAuth2SecurityScheme</code> class definition lists these elements as "optional". 
            In fact whether they are mandatory or not depends on the flow.  The <code>token</code>
            element is listed as optional even though it is mandatory for all predefined flows
            since it might not be mandatory for some flows defined in an extension.  We should
            investigate whether there is a better way to express these "variant record"
            constraints.</p><p>If multiple flows are available (for example, multiple OAuth 2.0
            security schemes with different flows are given for a <code>Form</code>) then only
            one may be selected for use by a <a>Consumer</a>. <span class="rfc2119-assertion"
            id="td-security-oauth2-other-flows">If an OAuth 2.0 flow other than <code>code</code>,
            <code>client</code> or <code>device</code> needs to be specified an extension vocabulary
            MUST be used.</span> This includes the <code>password</code> and <code>implicit</code>
            flows, which are no longer considered best practice [[WOT-SECURITY-GUIDELINES]]. This
            also applies to flows that are similar at the protocol level but do not exactly follow
            the OAuth 2.0 specification, for example by automating grants rather than invoking a
            user agent to interact with a human resource owner.  If no <code>scopes</code> are
            defined in the <code>SecurityScheme</code> then they are considered to be empty.</p>
            <p class="ednote">The device authorization endpoint technically uses a different protocol
            than the authorization endpoint used by other flows, and it might be possible for a
            developer to confuse the two.  However, since the <code>device</code> flow does not use
            the regular authorization endpoint there should be no ambiguity.  We are considering
            however an alternative design where there is a separate element,
            <code>device_authorization</code>, which MUST be included for the <code>device</code>
            flow (and then the regular authorization endpoint then MUST NOT be used).</p>
	    -->"""^^rdf:HTML .
    
:DataSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:DataSchema ;
    skos:definition """Metadata that describes the data format used. It can
          be used for validation."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 1 ;
    sh:property [
        sh:path rdf:type ;
        skos:definition """Assignment of JSON-based data types compatible
                with JSON Schema (one of boolean, integer, number,
                string, object, array, or null)."""^^rdf:HTML ;
        sh:maxCount 1 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:in (
            jsonschema:ObjectSchema
            jsonschema:ArraySchema
            jsonschema:StringSchema
            jsonschema:NumberSchema
            jsonschema:IntegerSchema
            jsonschema:BooleanSchema
            jsonschema:NullSchema
        );
        sh:order 5 ;
    ] ;
    sh:property _:title ;
    sh:property _:titles ;
    sh:property _:description ;
    sh:property _:descriptions ;
    sh:property [
        sh:path jsonschema:const ;
        skos:definition """Provides a constant value."""^^rdf:HTML ;
        sh:maxCount 1 ;
        sh:order 6 ;
    ] ;
    sh:property [
        sh:path jsonschema:default ;
        skos:definition """Supply a default value. The value SHOULD validate against the data schema in which it resides."""^^rdf:HTML ;
        sh:maxCount 1 ;
        sh:order 7 ;
    ] ;
    sh:property [
        sh:path schema:unitCode ;
        skos:definition """Provides unit information that is used, e.g.,
                in international science, engineering, and
                business. To preserve uniqueness, it is recommended that 
                the value of the unit points to a semantic definition (also see Section <a href="#semantic-annotations-example-version-units"
          class="internalDFN" data-link-type="dfn">Semantic Annotations</a>)."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 8 ;
    ] ;
    sh:property [
        sh:path jsonschema:oneOf ;
        skos:definition """Used to ensure that the data is valid against
                one of the specified schemas in the array."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:order 9 ;
    ] ;
    sh:property [
        sh:path jsonschema:enum ;
        skos:definition """Restricted set of values provided as an
                array."""^^rdf:HTML ;
        sh:order 10 ;
    ] ;
    sh:property [
        sh:path jsonschema:readOnly ;
        skos:definition """Boolean value that is a hint to indicate
                whether a property interaction / value is read only
                (=true) or not (=false)."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
        sh:order 11 ;
    ] ;
    sh:property [
        sh:path jsonschema:writeOnly ;
        skos:definition """Boolean value that is a hint to indicate
                whether a property interaction / value is write
                only (=true) or not (=false)."""^^rdf:HTML ;
        sh:datatype xsd:boolean ;
        sh:defaultValue false ;
        sh:maxCount 1 ;
        sh:order 12 ;
    ] ;
    sh:property [
        sh:path jsonschema:format ;
        skos:definition """Allows validation based on a format pattern
                such as "date-time", "email", "uri", etc. (Also see
                below.)"""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 13 ;
    ] ;
    skos:scopeNote """<p>The <code>format</code> string values are known from a
          fixed set of values and their corresponding format rules
          defined in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-schema" title="JSON Schema Validation: A Vocabulary for Structural Validation of JSON">JSON-SCHEMA</a></cite>]
          (Section 7.3 Defined Formats in particular). <span class="rfc2119-assertion" id="td-format-validation-known-values">Servients <em class="rfc2119" title="MAY">MAY</em> use the
          <code>format</code> value to perform additional
          validation accordingly.</span> <span class="rfc2119-assertion" id="td-format-validation-other-values">When a value that is
          not found in the known set of values is assigned to
          <code>format</code>, such a validation <em class="rfc2119" title="SHOULD">SHOULD</em> succeed.</span></p>
          Vocabulary terms typed as <code>any</code> <code>type</code> (e.g., <code>const</code>, <code>default</code>) follow data types compatible with JSON Schema (boolean, integer, number, string, object, array, or null).
          <p class="note">The <code>format</code> term is not widely implemented by JSON Schema tools. 
          In addition, the term <code>format</code> is being discussed by the JSON Schema standardisation community and may be replaced by another mechanism or removed in a future JSON Schema version.</p>"""^^rdf:HTML .

:ArraySchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:ArraySchema ;
    skos:definition """Metadata describing data of type <a href="#dfn-array" class="internalDFN" data-link-type="dfn">Array</a>. This
          <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> is indicated by the
          value <code>array</code> assigned to <code>type</code> in
          <code>DataSchema</code> instances."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 2 ;
    sh:property [
        sh:path jsonschema:items ;
        skos:definition """Used to define the characteristics of an
                array."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path jsonschema:minItems ;
        skos:definition """Defines the minimum number of items that have
                to be in the array."""^^rdf:HTML ;
        sh:datatype xsd:unsignedInt ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path jsonschema:maxItems ;
        skos:definition """Defines the maximum number of items that have
                to be in the array."""^^rdf:HTML ;
        sh:datatype xsd:unsignedInt ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] .
    
:BooleanSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:BooleanSchema ;
    skos:definition """Metadata describing data of type <code>boolean</code>.
          This <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> is indicated by the
          value <code>boolean</code> assigned to <code>type</code>
          in <code>DataSchema</code> instances."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 3 .
    
:NumberSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:NumberSchema ;
    skos:definition """Metadata describing data of type <code>number</code>.
          This <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> is indicated by the
          value <code>number</code> assigned to <code>type</code>
          in <code>DataSchema</code> instances."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 4 ;
    sh:property [
        sh:path jsonschema:minimum ;
        skos:definition """Specifies a minimum numeric value, representing an inclusive lower limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        # FIXME due to JSON-LD type coercion, datatype can also be integer
        sh:datatype xsd:double ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path jsonschema:exclusiveMinimum ;
        skos:definition """Specifies a minimum numeric value, representing an exclusive lower limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        # FIXME due to JSON-LD type coercion, datatype can also be integer
        sh:datatype xsd:double ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path jsonschema:maximum ;
        skos:definition """Specifies a maximum numeric value, representing an inclusive upper limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        # FIXME same as above (JSON-LD type coercion)
        sh:datatype xsd:double ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] ;
	sh:property [
        sh:path jsonschema:exclusiveMaximum ;
        skos:definition """Specifies a maximum numeric value, representing an exclusive upper limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        # FIXME same as above (JSON-LD type coercion)
        sh:datatype xsd:double ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path jsonschema:multipleOf ;
        skos:definition """Specifies the multipleOf value number. The value must strictly greater than 0. Only applicable for associated number or integer types."""^^rdf:HTML ;
        sh:datatype xsd:double ;
        sh:maxCount 1 ;
        sh:order 5 ;
    ] .

:IntegerSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:IntegerSchema ;
    skos:definition """Metadata describing data of type <code>integer</code>.
          This <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> is indicated by the
          value <code>integer</code> assigned to <code>type</code>
          in <code>DataSchema</code> instances."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 5 ;
    sh:property [
        sh:path jsonschema:minimum ;
        skos:definition """Specifies a minimum numeric value, representing an inclusive lower limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        sh:datatype xsd:integer ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path jsonschema:exclusiveMinimum ;
        skos:definition """Specifies a minimum numeric value, representing an exclusive lower limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        sh:datatype xsd:integer ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path jsonschema:maximum ;
        skos:definition """Specifies a maximum numeric value, representing an inclusive upper limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        sh:datatype xsd:integer ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path jsonschema:exclusiveMaximum ;
        skos:definition """Specifies a maximum numeric value, representing an exclusive upper limit. Only
                applicable for associated number or integer
                types."""^^rdf:HTML ;
        sh:datatype xsd:integer ;
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path jsonschema:multipleOf ;
        skos:definition """Specifies the multipleOf value number. The value must strictly greater than 0. Only applicable for associated number or integer types."""^^rdf:HTML ;
        sh:datatype xsd:integer ;
        sh:maxCount 1 ;
        sh:order 5 ;
    ] .
    
:ObjectSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:ObjectSchema ;
    skos:definition """Metadata describing data of type <a href="#dfn-object" class="internalDFN" data-link-type="dfn">Object</a>.
          This <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> is indicated by the
          value <code>object</code> assigned to <code>type</code>
          in <code>DataSchema</code> instances."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 6 ;
    sh:property [
        sh:path jsonschema:properties ;
        skos:definition """Data schema nested definitions."""^^rdf:HTML ;
        sh:node :DataSchemaShape ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path jsonschema:required ;
        skos:definition """Defines which members of the object type are mandatory, i.e. which members are mandatory in the payload that is to be sent (e.g. input of <code>invokeaction</code>, <code>writeproperty</code>) and what members will be definitely delivered in the payload that is being received (e.g. output of <code>invokeaction</code>, <code>readproperty</code>)"""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:order 2 ;
    ] .

:StringSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:StringSchema ;
    skos:definition """Metadata describing data of type <code>string</code>.
          This <a href="#dfn-subclass" class="internalDFN" data-link-type="dfn">Subclass</a> is indicated by the
          value <code>string</code> assigned to <code>type</code>
          in <code>DataSchema</code> instances."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 7 ;
        sh:property [
        sh:path jsonschema:minLength ;
        skos:definition """Specifies the minimum length of a string. Only applicable for associated string types."""^^rdf:HTML ;
        sh:datatype xsd:unsignedInt ;
        sh:maxCount 1 ;
        sh:order 1 ;
    ] ;
    sh:property [
        sh:path jsonschema:maxLength ;
        skos:definition """Specifies the maximum length of a string. Only applicable for associated string types."""^^rdf:HTML ;
        sh:datatype xsd:unsignedInt ;
        sh:maxCount 1 ;
        sh:order 2 ;
    ] ;
    sh:property [
        sh:path jsonschema:pattern ;
        skos:definition """Provides a regular expression to express constraints of the string value. The regular expression must follow the [[ECMA-262]] dialect."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:order 3 ;
    ] ;
    sh:property [
        sh:path jsonschema:contentEncoding ;
        skos:definition """Specifies the encoding used to store the contents, as specified in [[RFC2045]] (Section 6.1) and [[RFC4648]]."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        skos:example (
           "7bit" 
           "8bit" 
           "binary"
           "quoted-printable"
           "base16"
           "base32"
           "base64"
         );
        sh:maxCount 1 ;
        sh:order 4 ;
    ] ;
    sh:property [
        sh:path jsonschema:contentMediaType ;
        skos:definition """Specifies the MIME type of the contents of a string value, as described in [[RFC2046]]."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
        skos:example (
           "image/png" 
           "audio/mpeg"
         );
        sh:maxCount 1 ;
        sh:order 5 ;
    ] ;
    skos:scopeNote """<p class="note">The length of a string (i.e., <code>minLength</code> and
        <code>maxLength</code>) is defined as the number
        of Unicode code points, as defined by [[RFC8259]].
		Note that some <a href="https://www.w3.org/TR/i18n-glossary/#def_grapheme" target="_blank">user-perceived characters</a> are composed of more than one Unicode code point. Arbitrary index values might not fall on these grapheme boundaries, so truncation according to <code>maxLength</code> might alter the appearance or meaning of the string.
		</p>"""^^rdf:HTML .

:NullSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:NullSchema ;
    skos:definition """Metadata describing data of type <code>null</code>. This subclass is indicated by the value <code>null</code> assigned to <code>type</code> in <code>DataSchema</code> instances. 
    This Subclass describes only one acceptable value, namely <code>null</code>. 
    It is important to note that <code>null</code> does not mean the absence of a value. It is analogous to <code>null</code> in JavaScript, <code>None</code> in Python, <code>null</code> in Java and <code>nil</code> in Ruby programming languages. 
    It can be used as part of a <code>oneOf</code> declaration, where it is used to indicate, that the data can also be <code>null</code>."""^^rdf:HTML ;
    sh:closed false ;
    sh:order 8 .

_:title sh:path td:title ;
        skos:definition """Provides a human-readable title (e.g., display
                a text for UI representation) based on a default
                language."""^^rdf:HTML ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;        
        sh:maxCount 1 ;
        sh:order 1 .

_:titles sh:path td:titleInLanguage ;
         skos:definition """Provides multi-language human-readable titles
                (e.g., display a text for UI representation in
                different languages). Also see <cite><a href='#multilanguage'>MultiLanguage</a></cite>."""^^rdf:HTML ;
         sh:node :MultiLanguageShape ;
       	 sh:uniqueLang true ;
         sh:order 2 .

_:description sh:path td:description ;
              skos:definition """Provides additional (human-readable)
                      information based on a default language."""^^rdf:HTML ;
              sh:nodeKind sh:Literal ;
              sh:datatype xsd:string ;
              sh:maxCount 1 ;
              sh:order 3 .

_:descriptions sh:path td:descriptionInLanguage ;
               skos:definition """Can be used to support (human-readable)
                       information in different languages. Also see <cite><a href='#multilanguage'>MultiLanguage</a></cite>."""^^rdf:HTML ;
               sh:node :MultiLanguageShape ;
       		   sh:uniqueLang true ;
               sh:order 4 .

_:in sh:path wotsec:in ;
     skos:definition """Specifies the location of security
            authentication information.  """^^rdf:HTML ;
     sh:nodeKind sh:Literal ;
     sh:datatype xsd:string ;
     sh:defaultValue "header"^^xsd:string ;
     sh:maxCount 1 ;
     sh:in (
        "header"
        "query"
        "body"
        "cookie"
        "auto"
    );
    sh:order 100 .

_:apikeyIn sh:path wotsec:in ;
     skos:definition """Specifies the location of security
            authentication information.  """^^rdf:HTML ;
     sh:nodeKind sh:Literal ;
     sh:datatype xsd:string ;
     sh:defaultValue "header"^^xsd:string ;
     sh:maxCount 1 ;
     sh:in (
        "header"
        "query"
        "body"
        "cookie"
        "uri"
        "auto"
    );
    sh:order 100 .

_:name sh:path wotsec:name ;
       skos:definition """Name for query, header, cookie, or uri
               parameters."""^^rdf:HTML ;
       sh:nodeKind sh:Literal ;
       sh:datatype xsd:string ;
       sh:maxCount 1 ;
       sh:order 101 .

_:uriVariables sh:path wotsec:uriVariables ;
       skos:definition """Declaration of URI template variables to be used in security schemes."""^^rdf:HTML ;
       sh:node :DataSchemaShape ;
       sh:maxCount 1 ;
       sh:order 102 .

_:authorization sh:path wotsec:authorization ;
                skos:definition """URI of the authorization server."""^^rdf:HTML ;
                sh:nodeKind sh:IRI ;
                sh:datatype xsd:anyURI ;
                sh:maxCount 1 ;
                sh:order 1 .

_:identity sh:path wotsec:identity ;
           skos:definition """Identifier providing information which can be
                   used for selection or confirmation."""^^rdf:HTML ;
           sh:maxCount 1 ;
           sh:nodeKind sh:Literal ;
           sh:datatype xsd:string .

_:format sh:path wotsec:format ;
         skos:definition """Specifies format of security authentication
                 information."""^^rdf:HTML ;
         sh:nodeKind sh:Literal ;
         sh:datatype xsd:string ;
         sh:maxCount 1 ;
         skos:example (
           "jwt" 
           "cwt" 
           "jwe"
           "jws"
         );
         sh:defaultValue "jwt"^^xsd:string ;
         sh:order 3 .

_:alg sh:path wotsec:alg ;
      skos:definition """Encoding, encryption, or digest algorithm."""^^rdf:HTML ;
      sh:nodeKind sh:Literal ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      skos:example (
        "ES256"
        "ES512-256"
      );
      sh:defaultValue "ES256"^^xsd:string ;
      sh:order 2 .

_:oneOf sh:path wotsec:oneOf ;
      skos:definition """Array of two or more strings identifying other named security scheme definitions, any one of which, when satisfied, will allow access.  Only one may be chosen for use."""^^rdf:HTML ;
      sh:nodeKind sh:Literal ;
      sh:datatype xsd:string ;
      sh:minCount 2 ;
      sh:order 1 .

_:allOf sh:path wotsec:allOf ;
      skos:definition """Array of two or more strings identifying other named security scheme definitions, all of which must be satisfied for access."""^^rdf:HTML ;
      sh:nodeKind sh:Literal ;
      sh:datatype xsd:string ;
      sh:minCount 2 ;
      sh:order 2 .
