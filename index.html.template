<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Web of Things (WoT) Thing Description</title>
    <script src="https://www.w3.org/Tools/respec/respec-w3c-common" class="remove"></script>
    <script class='remove'>
          var respecConfig = {
              specStatus:     "ED"
            , processVersion: 2017
            , shortName:      "wot-thing-description"
            , copyrightStart: 2017
            , noLegacyStyle:  true
            , inlineCSS:      true
            , noIDLIn:        true
            , format:         "markdown"
            , wg:             "Web of Things Working Group"
            , wgURI:          "https://www.w3.org/WoT/WG/"
            , wgPublicList:   "public-wot-wg"
            , edDraftURI:     "https://w3c.github.io/wot-thing-description/"
            , githubAPI:      "https://api.github.com/repos/w3c/wot-thing-description"
            , issueBase:      "https://www.github.com/w3c/wot-thing-description/issues"
            , editors: [
                {
                  name:       "Sebastian Kaebisch"
                , w3cid:      "43064"
                , company:    "Siemens AG"
                , companyURL: "https://www.siemens.com/"
                }
              , {
                  name:       "Takuki Kamiya"
                , w3cid:      "29376"
                , company:    "Fujitsu Laboratories of America, Inc."
                , companyURL: "https://www.fujitsu.com/"
                }
              ]
            , localBiblio: {
                "JSON-SCHEMA-VALIDATION": {
                  title:    "JSON Schema Validation: A Vocabulary for Structural Validation of JSON"
                , href:     "https://tools.ietf.org/html/draft-handrews-json-schema-validation-00"
                , authors: [
                    "Austin Wright"
                  , "Henry Andrews"
                  , "Geraint Luff"
                  ]
                , status:   "Internet-Draft"
                , publisher:  "IETF"
                }
              , "JSON-SCHEMA-CORE": {
                  title:    "JSON Schema: A Media Type for Describing JSON Documents"
                , href:     "https://tools.ietf.org/html/draft-handrews-json-schema-00"
                , authors:  [
                    "Austin Wright"
                  , "Henry Andrews"
                  ]
                , status:    "Internet-Draft"
                , publisher: "IETF"
                }
              , "WOT-ARCHITECTURE" : {
                  title: "Web of Things Architecture"
                , href: "https://w3c.github.io/wot-architecture/"
                , authors:  [
                    "Kazuo Kajimoto"
                  , "Matthias Kovatsch"
                  , "Uday Davuluru"
                  ]
                , publisher: "W3C"
                , date: "20 August 2017"
                }
	, "WOT-PROTOCOL-BINDING" : {
                  title: "Web of Things Protocol Binding Templates"
                , href: "https://w3c.github.io/wot-binding-templates/"
                , authors:  [
                    "Michael Koster"
                  ]
                , publisher: "W3C"
                , date: "12 January 2018"
                }
              }
            , otherLinks: [
                {
                  key: "Contributors"
                , data: [
                    {
                      value: "In the GitHub repository"
                    , href: "https://github.com/w3c/wot-thing-description/graphs/contributors"
                    }
                  ]
                }
              , {
                  key: "Repository",
                  data: [
                    {
                      value: "We are on GitHub"
                    , href: "https://github.com/w3c/wot-thing-description/"
                    }
                  , {
                      value: "File a bug"
                    , href: "https://github.com/w3c/wot-thing-description/issues"
                    }
                  ]
                }
              ]
            };
    </script>
<style>
.example {
		border-color: #EA1252;
		background: #FEF11E;
		counter-increment: example;
		overflow: auto;
		clear: both;
	}
</style>
  </head>
  <body>

      <p class="ednote" title="First draft based on Simplified TD">
        This is the first draft based on the new simplified TD approach based on JSON-LD 1.1. Some definitions are not finished yet and are still in progress. A stable Thing Description deliverable version based on JSON-LD 1.0 can be found <a href="https://www.w3.org/TR/wot-thing-description/">here</a>. 
      </p>

  <section id="abstract">
This document describes a formal model and common representation for a Web of Things (WoT) Thing Description. A Thing Description describes the metadata and interfaces of Things, where a Thing is an abstraction of a physical entity that provides interactions to and participates in the Web of Things. Thing Descriptions provide a narrow-waist set of interactions based on a small vocabulary that makes it possible both to integrate diverse devices and to allow diverse applications to interoperate. Thing Descriptions, by default, are encoded in JSON-LD. JSON-LD provides both a powerful foundation to represent knowledge about Things and simplicity, since it allows processing as a JSON document. In addition to physical entities, Things can also represent virtual entities. A Thing Description instance can be hosted by the Thing itself or hosted externally due to Thing's resource restrictions (e.g. limited memory space) or when a Web of Things-compatible legacy device is retrofitted with a Thing Description.

<!-- for devices.
The TD must be acquired to use and interact with the Thing, since it describes the semantics of a Thing as well as its <a>WoT Interface</a>. Usually, Things directly provide their own TD, but the TD can also be hosted externally if there is not enough space on the device or when a WoT-compatible legacy device is retrofitted with a TD.-->
  </section>

  <section id="sotd">
  <p>
    Implementers need to be aware that this specification is considered unstable. Vendors interested in implementing this specification before it eventually reaches the Candidate Recommendation phase should subscribe to the [repository](https://github.com/w3c/wot-thing-description) and take part in the discussions.
  </p>

      <p class="ednote" title="The W3C WoT WG is asking for feedback">
        Please contribute to this draft using the <a href="https://github.com/w3c/wot-thing-description/issues">GitHub Issue</a> feature of the <a href="https://github.com/w3c/wot-thing-description/">WoT Thing Description</a> repository.
        For feedback on security and privacy considerations, please use the <a href="https://github.com/w3c/wot-security/issues">WoT Security and Privacy</a> Issues, as they are cross-cutting over all our documents.
      </p>

  </section>

  <section id="introduction">
    <h1>Introduction</h1>
    <p>
The W3C Thing Description (TD) is a central building block in a Web of Things (WoT) enabled system and can be considered as the entry point of a Thing (aka the <i>index.html</i> of the Thing). The TD consists of semantic metadata for the Thing itself, a narrow-waist interaction model with WoT's <code>Properties</code>, <code>Actions</code>, <code>Events</code>, a semantic schema to make data models machine-understandable, and features for Web Linking to express relations among Things. 
</p>
<p>
Properties can be used for controlling (or retrieving) parameters, such as a setting an operation state (or getting the current value). Actions model invocation of physical processes, but can also be used to abstract RPC-like calls of existing platforms. Events cover the push model where state change notifications, discrete events, and streams of values are sent asynchronously to the receiver. In general, the TD provides metadata for the different communication bindings (e.g., HTTP, CoAP, MQTT, etc.), mediaTypes (e.g., "application/json", "application/xml", "application/cbor", "application/exi" etc.), and security policies (authentication, authorization, etc.). The serialization of the TD instances is based on JSON and includes at least the TD core vocabularies as JSON keys as defined in this specification document.
</p>

<p>
Example 1 shows a simple TD instance in such JSON serializiation that reflects WoT's <code>Properties</code>, <code>Actions</code>, <code>Events</code> paradigm by describing a lamp Thing with the name <i>MyLampThing</i>.
</p>

<pre class="example" title="Simple Thing Description Sample">
{
    "id": "urn:dev:wot:com:example:servient:lamp",
    "name": "MyLampThing",
    "properties": {
        "status" : {
            "type": "string",
            "form": [{"href": "coaps://mylamp.example.com:5683/status"}]
        }
    },
    "actions": {
        "toggle" : {
            "form": [{"href": "coaps://mylamp.example.com:5683/toggle"}]
        }
    },
    "events":{
        "overheating":{
            "type": "string",
            "form": [{"href": "coaps://mylamp.example.com:5683/oh"}]
        }
    }
}
 </pre>




<p>Based on this content, we know there exists one <code>Property</code> interaction resource with the name <i>status</i>. In addition, information is provided such as that this Property is accessible via the CoAP protocol with a GET method (default assumption as descripted in the W3C WoT protocol template deliverable [[!WOT-PROTOCOL-BINDING]]) at coaps://mylamp.example.com:5683/status (announced within the <code>form</code> structure by the <code>href</code> key), which will return a string status value within a JSON structure (as default assumption).
</p>

<p>In a similar manner an <code>Action</code> is specified to toggle the switch status using the POST method that is applied to the coaps://mylamp.example.com:5683/toggle resource (see CoAP protocol binding description in the W3C WoT protocol template deliverable [[!WOT-PROTOCOL-BINDING]]).</p>

<p>The WoT's <code>Event</code> model enables a mechanism for events to be notified by a Thing. Here, a subscription of a possible overheating event of the lamp can be applied by using CoAP OBSERVE at coaps://mylamp.example.com:5683/oh. (see CoAP protocol binding description in the W3C WoT protocol template deliverable [[!WOT-PROTOCOL-BINDING]]).
</p>

<p>
The TD in Example 1 reflects some default assumptions that are not explicitly described. E.g., this includes that the media type of the exchange format of the interactions is based on JSON (=<code>mediaType</code>), the property <i>status</i> is not writable and observable. Thus, the TD specification defines vocabularies (<code>writable</code>, <code>observable</code>, <code>mediaType</code>) that have default values.  If these vocabularies are not implicit in a JSON TD instance, the JSON TD processor follows the default assumption for interpretation as defined here in this specification.

</p>
<p>The TD can be also processed as a RDF-based model. In that case, the JSON TD can be simple transformed into a JSON-LD style.  In terms of JSON-LD 1.1 serialization and  semantic's open-world assumption the mentioned vocabularies with default values will be always implicit present in the instances. Example 2 shows the TD in JSON-LD 1.1 serializiation that contains the same information as in Example 1.
</p>

<pre class="example" title="Thing Description as JSON-LD 1.1 Serializiation">
{
    "@context": "https://w3c.github.io/wot/w3c-wot-td-context.jsonld",
    "id": "urn:dev:wot:com:example:servient:lamp",
    "name": "MyLampThing",
    "properties": {
        "status": {
         "writable": false,
         "observable": false,
         "type": "string",
         "form": [{
             "href": "coaps://mylamp.example.com:5683/status",
             "mediaType": "application/json"
         }]
    }},
    "actions": {
     "toggle": {
        "form": [{
            "href": "coaps://mylamp.example.com:5683/toggle",
            "mediaType": "application/json"
        }]}},
    "events": {
        "overheating": {
            "type": "string",
            "form": [{
                "href": "coaps://mylamp.example.com:5683/oh",
                "mediaType": "application/json"
            }]
        }}
}
 </pre>


<p class="ednote">
Provide detail description about the semantic usage in the example. Please also check the samples provided in <a href="#examples" class="sec-ref">Section 6.7.</a>
</p>


</section>
</section>

<section id="terminology"> 
    <h2>Terminology</h2>
<p>The generic WoT terminology is defined in [[!WOT-ARCHITECTURE]]: <dfn data-lt="Things">Thing</dfn>, <dfn data-lt="Thing Descriptions">Thing Description</dfn> (in short <dfn>TD</dfn>), <dfn>Web of Things</dfn> (in short <b><i>WoT</i></b>),  <dfn>WoT Interface</dfn> etc.
</p>
  </section>

  <section>
    <h1>Namespaces</h1>

<p>
The namespace for TD is http://www.w3.org/ns/td#. TD itself defines a minimal set of classes and properties of its own. 
</p>
</section>

<section id="conformance">
    <h1>Conformance</h1>

<p>
  As well as sections marked as non-normative, all authoring guidelines, diagrams, examples,   and notes in this specification are non-normative. Everything else in this specification is
  normative.
</p>
<p id="respecRFP2119">
  The key words <em title="MUST" class="rfc2119">MUST</em>, <em title="MUST NOT" class="rfc2119">MUST NOT</em>, <em title="REQUIRED" class="rfc2119">REQUIRED</em>, <em title="SHOULD" class="rfc2119">SHOULD</em>, <em title="SHOULD NOT" class="rfc2119">SHOULD NOT</em>, <em title="RECOMMENDED" class="rfc2119">RECOMMENDED</em>, <em title="MAY" class="rfc2119">MAY</em>,
  and <em title="OPTIONAL" class="rfc2119">OPTIONAL</em> in this specification are to be interpreted as described in [[!RFC2119]].
</p>

 
<p>
A Thing Description instance complies with this specification if it follows the normative statements in Section <a href="#vocabularyDefinitionSection" class="sec-ref"><span class="secno">5.</span> <span class="sec-title">Vocabulary Definition</span></a>.
</p>

<p>
In case of JSON-LD serializiation, a Thing Description instance in JSON-LD format complies with this specification if it follows the normative statements in Section <a href="#jsonld-serialization" class="sec-ref"><span class="secno">6.</span> <span class="sec-title">Serialization</span></a>
</p>

 

<p class="issue">
We need to be more precise here: How to validate a TD? E.g., structure validation and/or RDF validation? Comments are welcome.
</p>

</section>



{vocabulary.template}




<section id="TD-serialization-section">
    <h1 >Thing Description Serializations</h1>

<p>
  Thing Description instances are modeled on the classes defined in <a href="#vocabularyDefinitionSection" class="sec-ref"></a>, and they can be serialized in JSON or <a href="https://json-ld.org/spec/latest/json-ld/">JSON-LD 1.1</a> by default. 
</p>

 

<section id="json-serializiation-section">
    <h1>JSON TD</h1>

<p>This section introduces the JSON-based serialization of the Thing Description (JSON TD). JSON TD allows semantic annotations and JSON TD instances can be simple transformed into RDF-based representation by JSON-LD 1.1 which will be introduced <a href="#jsonld1.1-serializiation-section" class="sec-ref">here</a>.</p>

<p>Mainly, all defined core vocabulary as defined in <a href="#sec-vocabulary-definitions" class="sec-ref">Vocabulary Definitions</a> will have a JSON key representation.</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-additional-vocabularies">JSON TD <em class="rfc2119">MAY</em> contain additional optional vocabularies that are not in the Thing Description core model.</span><!-- Testing comments go here. -->
<span class="rfc2119-assertion" id="json-serialization-additional-vocabularies-prefix">Terms from additional optional vocabularies used in a JSON-TD <em class="rfc2119">MUST</em> carry a prefix for identification within the key name (e.g., <tt>"http:header"</tt>).</span><!-- Testing comments go here -->
</p>

<p>The defined types of the vocabulary as defined in <a href="#sec-vocabulary-definitions" class="sec-ref">Vocabulary Definitions</a> will be transtormed to JSON-based types. The following rules are used for vocabularies based on simple type definitions:</p>
<ul>
<li><p>
<span class="rfc2119-assertion" id="json-serialization-string-type">Vocabularies that are based on simple types string and anyURI <em class="rfc2119">MUST</em> be serialized as JSON string.</span><!-- Testing comments go here. -->
</p></li>

<li><p>
<span class="rfc2119-assertion" id="json-serialization-unsigned-int-type">Vocabularies that are based on the simple type unsignedInt <em class="rfc2119">MUST</em> be serialized as JSON integer.</span><!-- Testing comments go here -->
</p></li>

<li><p>
<span class="rfc2119-assertion" id="json-serialization-number-type">Vocabularies that are based on the simple type double <em class="rfc2119">MUST</em> be serialized as JSON number.</span><!-- Testing comments go here -->
</p></li>
</ul>

<p>All vocabularies in <a href="#sec-vocabulary-definitions" class="sec-ref">Vocabulary Definitions</a> Section associated with class-based types are defined separately for structured JSON type transformation in the following subsections.</p>


  <section id="sec-thing-as-a-whole-json">
    <h2>Thing as a whole</h2>
<p>
<span class="rfc2119-assertion" id="json-serialization-mandatory-vocabularies">Each mandatory and required vocabulary, as defined in the class <a href="#thing" class="sec-ref">Thing</a>, <em class="rfc2119">MUST</em> be serialized as a JSON key at the top level of the JSON TD document.</span><!-- Testing comments go here -->
</p>


<p>
<span class="rfc2119-assertion" id="json-serialization-standard-objects">The type of the fields <code>properties</code>, <code>actions</code>, <code>events</code>, and <code>securityDefinitions</code> <em class="rfc2119">MUST</em> be serialized as a JSON object.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-link-array">The type of the field <code>links</code> <em class="rfc2119">MUST</em> be serialized as a JSON array.</span><!-- Testing comments go here -->
</p>

<p>An example of a TD snippet based on the defined fields is given below:</p>

  <pre class="example">
        {
          "label": "MyThing",
          "id": "urn:dev:wot:com:example:servient:myThing",
          "base": "https://servient.example.com/",
          "description": "Additional (human) readable information of the Thing.",
          "support": "https://servient.example.com/contact",
          "properties": {...},
          "actions": {...},
          "events": {...},
          "securityDefinitions": {...},
          "links": [...]
        }
   </pre>


 </section> <!-- end of id="sec-thing-as-a-whole-json"-->


    <section id="property-serialization-json">
      <h2>properties</h2>
  
<p>
<span class="rfc2119-assertion" id="json-serialization-properties">Properties (and sub-properties) offered by a Thing <em class="rfc2119">MUST</em> be collected in the <code>properties</code> field of (unique) Property names as JSON keys.</span><!-- Testing comments go here -->
<span class="rfc2119-assertion" id="json-serialization-property-vocabulary"> Each mandatory and required vocabulary, as defined in the class <a href="#property" class="sec-ref">Property</a>, <em class="rfc2119">MUST</em> be serialized as a JSON key within a Property field.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-property-objects"> The type of the fields <code>properties</code> and <code>items</code> <em class="rfc2119">MUST</em> be serialized as a JSON object.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-property-arrays"> The type of the fields <code>forms</code>, <code>required</code>, and <code>enum</code> <em class="rfc2119">MUST</em> be serialized as a JSON array.</span><!-- Testing comments go here -->
</p>

<p>An example of a TD snippet based on the defined fields is given below:</p>


  <pre class="example">
        {
          ...
          "properties": {
          	"on": {
          		"label": "On/Off",
          		"type": "boolean",
          		"forms": [...]
          	},
          	"status": {
          		"readOnly": true,
          		"type": "object",
          		"properties": {
          			"brightness": {
          				"type": "number",
          				"minimum": 0.0,
          				"maximum": 100.0,
          				"forms": [...]
          			},
          			"rgb": {
          				"type": "array",
          				"items" : {
          					"type" : "number",
          					"minimum": 0,
          					"maximum": 255
          				},
          				"minItems": 3,
          				"maxItems": 3
          			}
          		},
          		"required": ["brightness","rgb"],
          		"forms": [...]
          	}
          }
          ...
        }
   </pre>



    </section> <!-- end of id="property-serialization-json"-->

    <section id="action-serialization-json">
      <h2>actions</h2>

<p>
Actions offered by a Thing are collected in the <code>actions</code> field of (unique) Action names as JSON keys.
<span class="rfc2119-assertion" id="json-serialization-action-vocabulary">Each required vocabulary, as defined in the class <a href="#action" class="sec-ref">Action</a>, <em class="rfc2119">MUST</em> be serialized as a JSON key within a Action field.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-action-object">The type of the fields <code>input</code> and <code>output</code> in an Action <em class="rfc2119">MUST</em> be serialized as a JSON object.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-action-forms-not-object">The members keys of <code>input</code> and <code>output</code> rely on the the class <a href="#property" class="sec-ref">Property</a>. The <code>forms</code> field <em class="rfc2119">MUST NOT</em> be serialized as a JSON object.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-action-forms-array">The type of the field <code>forms</code> <em class="rfc2119">MUST</em> be serialized as a JSON array.</span><!-- Testing comments go here -->
</p>

<p>An example of a TD snippet based on the defined fields is given below:</p>

      <pre class="example">
        {
          ...
          "actions": {
            "fade" {
              "label": "Fade in/out",
              "description": "Smooth fade in and out animation.",
              "input": {
              	"type": "object",
              	"properties": {
              		"from": {
              			"type": "integer",
              			"minimum": 0,
              			"maximum": 100
              		},
              		"to": {
              			"type": "integer",
              			"minimum": 0,
              			"maximum": 100
              		},
              		"duration": {"type": "number"}
              	},
              	"required": ["to","duration"],
              },
              "output": {"type": "string"},
              "form": [...]
            }
          ]
          ...
        }
      </pre>

    </section> <!-- end of id="action-serialization-json"-->


    <section id="event-serialization-json">
      <h2>events</h2>
<p>
Events (and sub-events) offered by a Thing are collected in the <code>events</code> field of (unique) Event names as JSON keys.
<span class="rfc2119-assertion" id="json-serialization-event-vocabulary">Each required vocabulary, as defined in the class <a href="#event" class="sec-ref">Event</a>, <em class="rfc2119">MUST</em> be transformed as a JSON key within a Event field.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-event-objects">The type of the fields <code>properties</code> and <code>items</code> <em class="rfc2119">MUST</em> be serialized as a JSON object.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-event-arrays">The type of the fields <code>forms</code>, <code>required</code>, and <code>enum</code> <em class="rfc2119">MUST</em> be serialized as a JSON array.</span><!-- Testing comments go here -->
</p>


<p>An example of a TD snippet based on the defined fields is given below:</p>

      <pre class="example">
        {
          ...
          "event": {
          	"overheated": {
          		"type": "object",
          		"properties": {
          			"temperature": { "type": "number" }
          		},
          		"forms": [...]
          	}
          ...
        }
      </pre>

    </section> <!-- end of id="event-serialization-json"-->

    <section id="form-serialization-json">
      <h2>forms</h2>

<p>
<span class="rfc2119-assertion" id="json-serialization-form-vocabulary">Each mandatory and required vocabulary, as defined in the class <a href="#form" class="sec-ref">Form</a>, <em class="rfc2119">MUST</em> be serialized as a JSON key.</span><!-- Testing comments go here -->
</p>

<p>
<span class="rfc2119-assertion" id="json-serialization-form-protocol-vocabulary">If required, <code>forms</code> <em class="rfc2119">MAY</em> be supplemented with protocol-specific vocabularies identified with a prefix.</span><!-- Testing comments go here -->
See also [[!WOT-PROTOCOL-BINDING]].</p>

      <p>An example of a TD snippet based on the defined fields is given below:</p>

      <pre class="example">
        ...
        "forms": [
          {
            "href" : "http://mytemp.example.com:5683/temp",
            "mediaType": "application/json",
            "http:methodName": "POST",
            "rel": "writeProperty",
            "security": "basicConfig"
          }
        ]
        ...
      </pre>

    </section> <!-- end of id="form-serialization-json"-->


    <section id="links-serialization-json">
      <h2>links</h2>

	<p>
        <span class="rfc2119-assertion" id="json-serialization-form-link-vocabulary">Each mandatory and required vocabulary, as defined in the class <a href="#link" class="sec-ref">Link</a>, <em class="rfc2119">MUST</em> be serialized as a JSON key.</span><!-- Testing comments go here -->
	</p>

      <p>An example of a TD snippet based on the defined fields is given below:</p>

      <pre class="example">
        ...
        "links": [{
            "href": "https://servient.example.com/things/lampController",
            "rel": "controlledBy",
            "mediaType": "application/td"
        }]
        ...
      </pre>


    </section> <!-- end of id="links-serialization-json"-->

    <section id="securityDefinitions-serialization-json">
      <h2>securityDefinitions</h2>

      <p class="ednote">This is the first draft containing the new security vocabularies. The definition is not yet completed and is still in progress.
      </p>

	<p>
        <span class="rfc2119-assertion" id="json-serialization-security-vocabulary">Each mandatory and required vocabulary, as defined in the class <a href="#security" class="sec-ref">Security</a>, <em class="rfc2119">MUST</em> be serialized as a JSON key.</span><!-- Testing comments go here -->
	</p>

      <pre class="example">
        ...
        "securityDefinitions": {
            "bearerTokenConfig": {
            	"scheme": "bearer",
            	"format": "jwt",
            	"alg": "ES256",
            	"authorizationUrl": "https://servient.example.com:8443/"
            }
        ...
      </pre>


    </section> <!-- end of id="form-serialization-json"-->

  </section> <!-- end of id="serialization-json"-->

<section id="jsonld1.1-serializiation-section">
    <h1>JSON-LD 1.1</h1>


      <p class="ednote" title="JSON-LD 1.1 ">
	This is the first draft that uses JSON-LD 1.1 as a serialization format of the Thing Description. The working assumption is based on the <a href="https://json-ld.org/spec/latest/json-ld/#">Community Draft of JSON-LD 1.1</a>. There is the plan to set up a JSON-LD Working Group with the following <a href="https://www.w3.org/2018/03/jsonld-wg-charter.html">JSON-LD Working Group Charter</a>. It is planned that this section always conforms to the latest working assumptions of JSON-LD 1.1.
      </p>

<p> This section specifies the serializiation of Thing Description instances based on <a href="https://json-ld.org/spec/latest/json-ld/#">JSON-LD 1.1</a>. JSON-LD 1.1 is a JSON-based format to serialize Linked Data by using a number of syntax tokens and keywords (typically starting with the <code>@</code> character). JSON-LD 1.1 provides an oppertunity  to be alligned with the <a href="#json-serializiation-section">JSON TD serlializiation</a> and RDF-based modeling to increase the semantic interoperability.  
</p>

<p>Mainly, an instance is a valid Thing Description serializations in JSON-LD 1.1 when it meets the following three requirements:</p>
  <ul>
    <li>
        <span class="rfc2119-assertion" id="json-1.1-serialization-baseline">A valid JSON-LD-1.1 Thing Description serialization <em class="rfc2119">MUST</em> fulfill all requirements that are defined in <a href="#json-serializiation-section">JSON TD</a></span><!-- Testing comments go here -->
    </li>
     <li>
        <span class="rfc2119-assertion" id="json-1.1-serialization-defaults">In a valid JSON-LD 1.1 Thing Description serialization, all vocabularies that have a default value as defined  <a href="#vocabularyDefinitionSection">Vocabulary Definition</a> <em class="rfc2119">MUST</em> be present at least with their default value.</span><!-- Testing comments go here -->
     </li>
     <li>
        <span class="rfc2119-assertion" id="json-1.1-serialization-context">In a valid JSON-LD 1.1 Thing Description serialization, the <code>@context</code> key from JSON-LD 1.1 <em class="rfc2119">MUST</em> have the value of the Thing description context file <code>https://w3c.github.io/wot/w3c-wot-td-context.jsonld</code>.</span><!-- Testing comments go here -->
     </li>
  </ul>


  <pre class="example">
    {
      "@context": "https://w3c.github.io/wot/w3c-wot-td-context.jsonld",
      ...
    }
  </pre>

<p>
  In case a single Thing Description instance involves several contexts, additional namespaces with prefixes can be extended to the <code>@context</code> array structure. This option proves relevant if one wants to extend the existing Thing Description context without modifying it. For instance:
</p>
  <pre class="example">
    {
      "@context": ["https://w3c.github.io/wot/w3c-wot-td-context.jsonld",
                   {"sensor": "http://iotschema.org/"}],
      ...
    }
  </pre>

<p>
The following is an example of a Thing Description instance used in JSON-LD 1.1. </p>

  <pre class="example">
{
    "@context": ["https://w3c.github.io/wot/w3c-wot-td-context.jsonld", 
    		{"iot": "http://iotschema.org/"}],
    "@type" : "Thing",
    "id": "urn:dev:wot:com:example:servient:lamp",
    "name": "MyLampThing",
    "description" : "MyLampThing uses JSON-LD 1.1 serialization",
    "properties": {
        "status": {
             "@type" : "iot:SwitchStatus",
             "description" : "Shows the current status of the lamp",
             "writable": false,
             "observable": false,
             "type": "string",
             "form": [{
                 "href": "coaps://mylamp.example.com:5683/status",
                 "mediaType": "application/json"
             }]
        }
    },
    "actions": {
     "toggle": {
        "@type" : "iot:SwitchStatus",
        "description" : "Turn on or off the lamp.",
        "form": [{
            "href": "coaps://mylamp.example.com:5683/toggle",
            "mediaType": "application/json"
        }]}},
    "events": {
        "overheating": {
            "@type" : "iot:TemperatureAlarm",
            "description" : "Lamp reaches a critical temperature (overheating).",
            "type": "string",
            "form": [{
                "href": "coaps://mylamp.example.com:5683/oh",
                "mediaType": "application/json"
            }]
        }}
}
   </pre>


 

</section> <!-- end of id="serialization-json-ld"-->

<section id="exi-serializiation-section">
    <h1>EXI</h1>
</section>

<section id="cbor-serializiation-section">
    <h1>CBOR</h1>
</section>

    <section id="securityDefinitions-serialization">
      <h2>Implementation Note</h2>



</section>
 
 </section> <!-- end of id="TD-serialization-section"-->

  
    
<section id="security-consideration">
      <h4>Security and Privacy Considerations</h4>
<p class="ednote">
  Please see the
  <a href="https://github.com/w3c/wot-security/">WoT Security and Privacy</a>
  repository for work in progress regarding threat models, assets, risks, 
  recommended mitigations, and best practices for security and privacy for systems 
  using the Web of Things.
  Once complete, security and privacy considerations relevant to Thing Descriptions will 
  be summarized in this section.
</p>
 </section>

<section id="changes" class="appendix">
<h1>Recent Specification Changes</h1>
<h2 id="changes1">Changes from First Public Working Draft</h2>
  <ul>
    <li>Property's "outputData" field was renamed as "schema".</li>
    <li>Action's "inputData" and "outputData" fields were renamed as "inputSchema" and "outputSchema", respectively.</li>
    <li>Event's "outputData" field was renamed as "schema".</li>
    <li>Communication metadata "link" was renamed as "form", and a form now contains a new field "rel".</li>
    <li>A Web "link" was introduced at the top level.</li>
    <li>Descriptions were added to explain how semantic annotations can be attached at various levels (thing, interaction and data).</li>
  </ul>
</section>

<section   id="acknowledgements" class="appendix normative">
<h1>Acknowledgements</h1>
<p>This document contains a significant contribution from Web of Things members: ...</p>
</section>


  </body>
</html>
